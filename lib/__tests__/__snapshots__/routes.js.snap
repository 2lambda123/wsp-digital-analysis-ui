// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Routes should render 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Routes
    history={
      Object {
        "canGo": [Function],
        "createHref": [Function],
        "createKey": [Function],
        "createLocation": [Function],
        "createPath": [Function],
        "getCurrentLocation": [Function],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "listen": [Function],
        "listenBefore": [Function],
        "push": [Function],
        "replace": [Function],
        "transitionTo": [Function],
        "unsubscribe": [Function],
      }
    }
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
  >
    <Router
      history={
        Object {
          "canGo": [Function],
          "createHref": [Function],
          "createKey": [Function],
          "createLocation": [Function],
          "createPath": [Function],
          "getCurrentLocation": [Function],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "listen": [Function],
          "listenBefore": [Function],
          "push": [Function],
          "replace": [Function],
          "transitionTo": [Function],
          "unsubscribe": [Function],
        }
      }
      onUpdate={[Function]}
      render={[Function]}
    >
      <RouterContext
        components={
          Array [
            [Function],
          ]
        }
        createElement={[Function]}
        location={
          Object {
            "action": "POP",
            "hash": "",
            "key": null,
            "pathname": "/",
            "query": Object {},
            "search": "",
            "state": undefined,
          }
        }
        params={Object {}}
        router={
          Object {
            "canGo": [Function],
            "createHref": [Function],
            "createKey": [Function],
            "createLocation": [Function],
            "createPath": [Function],
            "getCurrentLocation": [Function],
            "go": [Function],
            "goBack": [Function],
            "goForward": [Function],
            "isActive": [Function],
            "listen": [Function],
            "listenBefore": [Function],
            "location": Object {
              "action": "POP",
              "hash": "",
              "key": null,
              "pathname": "/",
              "query": Object {},
              "search": "",
              "state": undefined,
            },
            "params": Object {},
            "push": [Function],
            "replace": [Function],
            "routes": Array [
              Object {
                "component": [Function],
                "path": "/",
              },
            ],
            "setRouteLeaveHook": [Function],
            "transitionTo": [Function],
            "unsubscribe": [Function],
          }
        }
        routes={
          Array [
            Object {
              "component": [Function],
              "path": "/",
            },
          ]
        }
      >
        <Connect(SelectRegion)
          location={
            Object {
              "action": "POP",
              "hash": "",
              "key": null,
              "pathname": "/",
              "query": Object {},
              "search": "",
              "state": undefined,
            }
          }
          params={Object {}}
          route={
            Object {
              "component": [Function],
              "path": "/",
            }
          }
          routeParams={Object {}}
          router={
            Object {
              "canGo": [Function],
              "createHref": [Function],
              "createKey": [Function],
              "createLocation": [Function],
              "createPath": [Function],
              "getCurrentLocation": [Function],
              "go": [Function],
              "goBack": [Function],
              "goForward": [Function],
              "isActive": [Function],
              "listen": [Function],
              "listenBefore": [Function],
              "location": Object {
                "action": "POP",
                "hash": "",
                "key": null,
                "pathname": "/",
                "query": Object {},
                "search": "",
                "state": undefined,
              },
              "params": Object {},
              "push": [Function],
              "replace": [Function],
              "routes": Array [
                Object {
                  "component": [Function],
                  "path": "/",
                },
              ],
              "setRouteLeaveHook": [Function],
              "transitionTo": [Function],
              "unsubscribe": [Function],
            }
          }
          routes={
            Array [
              Object {
                "component": [Function],
                "path": "/",
              },
            ]
          }
        >
          <SelectRegion
            clearCurrentRegion={[Function]}
            loadAllRegions={[Function]}
            location={
              Object {
                "action": "POP",
                "hash": "",
                "key": null,
                "pathname": "/",
                "query": Object {},
                "search": "",
                "state": undefined,
              }
            }
            params={Object {}}
            push={[Function]}
            regions={
              Array [
                Object {
                  "_id": "1",
                  "accessGroup": "accessGroupName",
                  "bounds": Object {
                    "east": -76,
                    "north": 39,
                    "south": 38,
                    "west": -77,
                  },
                  "createdAt": "2017-11-08T12:30:50.133Z",
                  "createdBy": "person@gmail.com",
                  "description": "Region description",
                  "name": "Mock Region",
                  "nonce": "12345",
                  "opportunityDatasets": Array [
                    Object {
                      "dataSource": "lodes-data-2014",
                      "key": "Workers_total",
                      "name": "Workers total",
                    },
                  ],
                  "statusCode": "DONE",
                  "updatedAt": "2017-11-08T12:31:19.602Z",
                  "updatedBy": "person@gmail.com",
                },
              ]
            }
            route={
              Object {
                "component": [Function],
                "path": "/",
              }
            }
            routeParams={Object {}}
            router={
              Object {
                "canGo": [Function],
                "createHref": [Function],
                "createKey": [Function],
                "createLocation": [Function],
                "createPath": [Function],
                "getCurrentLocation": [Function],
                "go": [Function],
                "goBack": [Function],
                "goForward": [Function],
                "isActive": [Function],
                "listen": [Function],
                "listenBefore": [Function],
                "location": Object {
                  "action": "POP",
                  "hash": "",
                  "key": null,
                  "pathname": "/",
                  "query": Object {},
                  "search": "",
                  "state": undefined,
                },
                "params": Object {},
                "push": [Function],
                "replace": [Function],
                "routes": Array [
                  Object {
                    "component": [Function],
                    "path": "/",
                  },
                ],
                "setRouteLeaveHook": [Function],
                "transitionTo": [Function],
                "unsubscribe": [Function],
              }
            }
            routes={
              Array [
                Object {
                  "component": [Function],
                  "path": "/",
                },
              ]
            }
          >
            <div
              className="Welcome"
            >
              <div
                className="WelcomeTitle"
              >
                <span
                  className="logo"
                  to="/"
                >
                  conveyal analysis
                </span>
              </div>
              <Group>
                <div
                  className="form-group"
                >
                  <ButtonLink
                    block={true}
                    style="success"
                    to="/regions/create"
                  >
                    <Link
                      className="btn btn-success btn-block"
                      onlyActiveOnIndex={false}
                      style={Object {}}
                      to="/regions/create"
                    >
                      <a
                        className="btn btn-success btn-block"
                        href="/regions/create"
                        onClick={[Function]}
                        style={Object {}}
                      >
                        <Icon
                          type="plus"
                        >
                          <i
                            className="fa fa-plus fa-fw "
                          />
                        </Icon>
                         
                        Set up a new region
                      </a>
                    </Link>
                  </ButtonLink>
                </div>
              </Group>
              <div>
                <p
                  style={
                    Object {
                      "textAlign": "center",
                    }
                  }
                >
                  or go to an existing region
                </p>
                <div
                  className="list-group"
                >
                  <Link
                    className="list-group-item"
                    onlyActiveOnIndex={false}
                    style={Object {}}
                    title="Go to region"
                    to="/regions/1"
                  >
                    <a
                      className="list-group-item"
                      href="/regions/1"
                      onClick={[Function]}
                      style={Object {}}
                      title="Go to region"
                    >
                      <span>
                        <Icon
                          type="map-o"
                        >
                          <i
                            className="fa fa-map-o fa-fw "
                          />
                        </Icon>
                         
                        Mock Region
                      </span>
                    </a>
                  </Link>
                </div>
              </div>
            </div>
          </SelectRegion>
        </Connect(SelectRegion)>
      </RouterContext>
    </Router>
  </Routes>
</Provider>
`;
