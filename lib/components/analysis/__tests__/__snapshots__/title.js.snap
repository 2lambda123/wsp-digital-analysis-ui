// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Components > Analysis > Title should render properly 1`] = `
<AnalysisTitle>
  <Flex
    align="center"
    borderBottom="1px solid #ddd"
    justify="space-between"
    p="12px"
    width="640px"
  >
    <Box
      alignItems="center"
      borderBottom="1px solid #ddd"
      display="flex"
      justifyContent="space-between"
      p="12px"
      width="640px"
    >
      <div
        className="css-yh7vyv"
      >
        <Box
          fontSize="14px"
        >
          <div
            className="css-1kuy7z7"
          >
            <Icon
              icon={
                Object {
                  "icon": Array [],
                  "iconName": "chart-area",
                  "prefix": "fas",
                }
              }
            >
              <FontAwesomeIcon
                border={false}
                className=""
                fixedWidth={true}
                flip={null}
                icon={
                  Object {
                    "icon": Array [],
                    "iconName": "chart-area",
                    "prefix": "fas",
                  }
                }
                inverse={false}
                listItem={false}
                mask={null}
                pull={null}
                pulse={false}
                rotation={null}
                size={null}
                spin={false}
                swapOpacity={false}
                symbol={false}
                title=""
                transform={null}
              >
                <svg
                  aria-hidden="true"
                  className="svg-inline--fa fa-chart-area fa-w-NaN fa-fw "
                  data-icon="chart-area"
                  data-prefix="fas"
                  focusable="false"
                  role="img"
                  style={Object {}}
                  viewBox="0 0 undefined undefined"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    fill="currentColor"
                    style={Object {}}
                  />
                </svg>
              </FontAwesomeIcon>
            </Icon>
             
            Analysis
          </div>
        </Box>
        <Flex>
          <Box
            display="flex"
          >
            <div
              className="css-k008qs"
            >
              <Menu>
                <MenuButton
                  as={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "displayName": "Button",
                      "render": [Function],
                    }
                  }
                  isDisabled={true}
                  justified={true}
                  mr={2}
                  rightIcon="chevron-down"
                  variantColor="green"
                >
                  <Button
                    aria-controls="menu-1"
                    aria-expanded={false}
                    aria-haspopup="menu"
                    id="menubutton-2"
                    isDisabled={true}
                    justified={true}
                    mr={2}
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    rightIcon="chevron-down"
                    role="button"
                    variantColor="green"
                  >
                    <PseudoBox
                      _active={
                        Object {
                          "bg": "green.700",
                        }
                      }
                      _disabled={
                        Object {
                          "boxShadow": "none",
                          "cursor": "not-allowed",
                          "opacity": "40%",
                        }
                      }
                      _focus={
                        Object {
                          "boxShadow": "outline",
                        }
                      }
                      _hover={
                        Object {
                          "bg": "green.600",
                        }
                      }
                      alignItems="center"
                      appearance="none"
                      aria-controls="menu-1"
                      aria-disabled={true}
                      aria-expanded={false}
                      aria-haspopup="menu"
                      as="button"
                      bg="green.500"
                      borderRadius="md"
                      color="white"
                      disabled={true}
                      display="inline-flex"
                      fontSize="md"
                      fontWeight="semibold"
                      height={10}
                      id="menubutton-2"
                      justified={true}
                      justifyContent="center"
                      lineHeight="1.2"
                      minWidth={10}
                      mr={2}
                      onClick={[Function]}
                      onKeyDown={[Function]}
                      outline="none"
                      position="relative"
                      px={4}
                      role="button"
                      transition="all 250ms"
                      type="button"
                      userSelect="none"
                      verticalAlign="middle"
                      whiteSpace="nowrap"
                    >
                      <button
                        aria-controls="menu-1"
                        aria-disabled={true}
                        aria-expanded={false}
                        aria-haspopup="menu"
                        className="css-cxhad6"
                        disabled={true}
                        id="menubutton-2"
                        onClick={[Function]}
                        onKeyDown={[Function]}
                        role="button"
                        type="button"
                      >
                        Actions
                        <ButtonIcon
                          icon="chevron-down"
                          ml={2}
                          mr={-1}
                        >
                          <Icon
                            aria-hidden="true"
                            color="currentColor"
                            focusable="false"
                            ml={2}
                            mr={-1}
                            name="chevron-down"
                          >
                            <Styled(div)
                              aria-hidden="true"
                              as="svg"
                              color="currentColor"
                              display="inline-block"
                              focusable="false"
                              ml={2}
                              mr={-1}
                              role="presentation"
                              size="1em"
                              verticalAlign="middle"
                              viewBox="0 0 24 24"
                            >
                              <svg
                                aria-hidden="true"
                                className="css-yyruks"
                                focusable="false"
                                role="presentation"
                                viewBox="0 0 24 24"
                              >
                                <path
                                  d="M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z"
                                  fill="currentColor"
                                />
                              </svg>
                            </Styled(div)>
                          </Icon>
                        </ButtonIcon>
                      </button>
                    </PseudoBox>
                  </Button>
                </MenuButton>
                <MenuList>
                  <ForwardRef
                    _focus={
                      Object {
                        "outline": 0,
                      }
                    }
                    anchorEl={
                      <button
                        aria-controls="menu-1"
                        aria-disabled="true"
                        aria-expanded="false"
                        aria-haspopup="menu"
                        class="css-cxhad6"
                        disabled=""
                        id="menubutton-2"
                        role="button"
                        type="button"
                      >
                        Actions
                        <svg
                          aria-hidden="true"
                          class="css-yyruks"
                          focusable="false"
                          role="presentation"
                          viewBox="0 0 24 24"
                        >
                          <path
                            d="M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z"
                            fill="currentColor"
                          />
                        </svg>
                      </button>
                    }
                    aria-labelledby="menubutton-2"
                    bg="#fff"
                    borderWidth="1px"
                    color="inherit"
                    id="menu-1"
                    isOpen={false}
                    minW="3xs"
                    modifiers={
                      Object {
                        "preventOverflow": Object {
                          "boundariesElement": "viewport",
                          "enabled": true,
                        },
                      }
                    }
                    onBlur={[Function]}
                    onKeyDown={[Function]}
                    py={2}
                    role="menu"
                    rounded="md"
                    shadow="sm"
                    tabIndex={-1}
                    usePortal={false}
                    zIndex="1"
                  />
                </MenuList>
              </Menu>
              <Button
                isDisabled={false}
                leftIcon="repeat"
                onClick={[Function]}
                title=""
                variantColor="blue"
              >
                <PseudoBox
                  _active={
                    Object {
                      "bg": "blue.700",
                    }
                  }
                  _disabled={
                    Object {
                      "boxShadow": "none",
                      "cursor": "not-allowed",
                      "opacity": "40%",
                    }
                  }
                  _focus={
                    Object {
                      "boxShadow": "outline",
                    }
                  }
                  _hover={
                    Object {
                      "bg": "blue.600",
                    }
                  }
                  alignItems="center"
                  appearance="none"
                  as="button"
                  bg="blue.500"
                  borderRadius="md"
                  color="white"
                  display="inline-flex"
                  fontSize="md"
                  fontWeight="semibold"
                  height={10}
                  justifyContent="center"
                  lineHeight="1.2"
                  minWidth={10}
                  onClick={[Function]}
                  outline="none"
                  position="relative"
                  px={4}
                  title=""
                  transition="all 250ms"
                  type="button"
                  userSelect="none"
                  verticalAlign="middle"
                  whiteSpace="nowrap"
                >
                  <button
                    className="css-1or62k6"
                    onClick={[Function]}
                    title=""
                    type="button"
                  >
                    <ButtonIcon
                      icon="repeat"
                      ml={-1}
                      mr={2}
                    >
                      <Icon
                        aria-hidden="true"
                        color="currentColor"
                        focusable="false"
                        ml={-1}
                        mr={2}
                        name="repeat"
                      >
                        <Styled(div)
                          aria-hidden="true"
                          as="svg"
                          color="currentColor"
                          display="inline-block"
                          focusable="false"
                          ml={-1}
                          mr={2}
                          role="presentation"
                          size="1em"
                          verticalAlign="middle"
                          viewBox="0 0 24 24"
                        >
                          <svg
                            aria-hidden="true"
                            className="css-yxiis9"
                            focusable="false"
                            role="presentation"
                            viewBox="0 0 24 24"
                          >
                            <g
                              fill="currentColor"
                            >
                              <path
                                d="M10.319,4.936a7.239,7.239,0,0,1,7.1,2.252,1.25,1.25,0,1,0,1.872-1.657A9.737,9.737,0,0,0,9.743,2.5,10.269,10.269,0,0,0,2.378,9.61a.249.249,0,0,1-.271.178l-1.033-.13A.491.491,0,0,0,.6,9.877a.5.5,0,0,0-.019.526l2.476,4.342a.5.5,0,0,0,.373.248.43.43,0,0,0,.062,0,.5.5,0,0,0,.359-.152l3.477-3.593a.5.5,0,0,0-.3-.844L5.15,10.172a.25.25,0,0,1-.2-.333A7.7,7.7,0,0,1,10.319,4.936Z"
                              />
                              <path
                                d="M23.406,14.1a.5.5,0,0,0,.015-.526l-2.5-4.329A.5.5,0,0,0,20.546,9a.489.489,0,0,0-.421.151l-3.456,3.614a.5.5,0,0,0,.3.842l1.848.221a.249.249,0,0,1,.183.117.253.253,0,0,1,.023.216,7.688,7.688,0,0,1-5.369,4.9,7.243,7.243,0,0,1-7.1-2.253,1.25,1.25,0,1,0-1.872,1.656,9.74,9.74,0,0,0,9.549,3.03,10.261,10.261,0,0,0,7.369-7.12.251.251,0,0,1,.27-.179l1.058.127a.422.422,0,0,0,.06,0A.5.5,0,0,0,23.406,14.1Z"
                              />
                            </g>
                          </svg>
                        </Styled(div)>
                      </Icon>
                    </ButtonIcon>
                    Fetch results
                  </button>
                </PseudoBox>
              </Button>
            </div>
          </Box>
        </Flex>
      </div>
    </Box>
  </Flex>
</AnalysisTitle>
`;

exports[`Components > Analysis > Title should render properly given different states 1`] = `
<div
  className="ApplicationDockTitle"
  style={
    Object {
      "width": "640px",
    }
  }
>
  <div>
    <Icon
      icon={
        Object {
          "icon": Array [],
          "iconName": "chart-area",
          "prefix": "fas",
        }
      }
    />
     
    Analysis
  </div>
  <div>
    <Button
      className="pull-right"
      disabled={false}
      onClick={[MockFunction]}
      size="sm"
      style="primary"
      title=""
    >
      <Icon
        icon={
          Object {
            "icon": Array [],
            "iconName": "sync",
            "prefix": "fas",
          }
        }
      />
       
      Fetch results
    </Button>
    <Button
      className="pad-right pull-right"
      disabled={false}
      onClick={[MockFunction]}
      size="sm"
      style="success"
      title=""
    >
      <Icon
        icon={
          Object {
            "icon": Array [],
            "iconName": "plus",
            "prefix": "fas",
          }
        }
      />
      New regional analysis
    </Button>
  </div>
</div>
`;

exports[`Components > Analysis > Title should render properly given different states 2`] = `
<div
  className="ApplicationDockTitle"
  style={
    Object {
      "width": "640px",
    }
  }
>
  <div>
    <Icon
      icon={
        Object {
          "icon": Array [],
          "iconName": "chart-area",
          "prefix": "fas",
        }
      }
    />
     
    Analysis
  </div>
  <div>
    <Button
      className="pull-right"
      disabled={false}
      onClick={[MockFunction]}
      size="sm"
      style="primary"
      title=""
    >
      <Icon
        icon={
          Object {
            "icon": Array [],
            "iconName": "sync",
            "prefix": "fas",
          }
        }
      />
       
      Fetch results
    </Button>
    <Button
      className="pad-right pull-right"
      disabled={true}
      onClick={[MockFunction]}
      size="sm"
      style="success"
      title="Fetch results for a single point before running a regional analysis"
    >
      <Icon
        icon={
          Object {
            "icon": Array [],
            "iconName": "plus",
            "prefix": "fas",
          }
        }
      />
      New regional analysis
    </Button>
  </div>
</div>
`;

exports[`Components > Analysis > Title should render properly given different states 3`] = `
<div
  className="ApplicationDockTitle"
  style={
    Object {
      "width": "640px",
    }
  }
>
  <div>
    <Icon
      icon={
        Object {
          "icon": Array [],
          "iconName": "chart-area",
          "prefix": "fas",
        }
      }
    />
     
    Analysis
  </div>
  <div>
    <Button
      className="pull-right"
      disabled={true}
      onClick={[MockFunction]}
      size="sm"
      style="primary"
      title="Select a project before fetching results"
    >
      <Icon
        icon={
          Object {
            "icon": Array [],
            "iconName": "sync",
            "prefix": "fas",
          }
        }
      />
       
      Fetch results
    </Button>
    <Button
      className="pad-right pull-right"
      disabled={false}
      onClick={[MockFunction]}
      size="sm"
      style="success"
      title=""
    >
      <Icon
        icon={
          Object {
            "icon": Array [],
            "iconName": "plus",
            "prefix": "fas",
          }
        }
      />
      New regional analysis
    </Button>
  </div>
</div>
`;

exports[`Components > Analysis > Title should render properly given different states 4`] = `
<div
  className="ApplicationDockTitle"
  style={
    Object {
      "width": "640px",
    }
  }
>
  <div>
    <Icon
      icon={
        Object {
          "icon": Array [],
          "iconName": "chart-area",
          "prefix": "fas",
        }
      }
    />
     
    Loading opportunity dataset…
  </div>
  <div>
    <Button
      className="pull-right"
      onClick={[MockFunction]}
      size="sm"
      style="danger"
    >
      <Icon
        icon={
          Object {
            "icon": Array [],
            "iconName": "times",
            "prefix": "fas",
          }
        }
      />
       Abort
    </Button>
  </div>
</div>
`;
