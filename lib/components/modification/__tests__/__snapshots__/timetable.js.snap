// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Component > Timetable renders correctly 1`] = `
<TimetableComponent
  allPhaseFromTimetableStops={Object {}}
  bidirectional={false}
  modificationStops={Array []}
  numberOfStops={0}
  projectTimetables={Array []}
  qualifiedStops={Array []}
  remove={[MockFunction]}
  segmentDistances={Array []}
  setMapState={[MockFunction]}
  timetable={
    Object {
      "_id": "timetable-id",
      "dwellTime": 10,
      "dwellTimes": Array [
        12,
      ],
      "endTime": 57600,
      "exactTimes": false,
      "friday": true,
      "headwaySecs": 900,
      "modificationId": "1234",
      "modificationName": "Test Modification",
      "monday": true,
      "name": "Test timetable",
      "patternTrips": Array [
        "abcd",
      ],
      "phaseAtStop": "",
      "phaseFromStop": "",
      "phaseFromTimetable": "",
      "phaseSeconds": 300,
      "saturday": false,
      "segmentSpeeds": Array [],
      "sourceTrip": "abcd",
      "startTime": 28800,
      "sunday": false,
      "thursday": true,
      "tuesday": true,
      "wednesday": true,
    }
  }
  update={[MockFunction]}
>
  <Collapsible
    defaultExpanded={false}
    heading={[Function]}
  >
    <Panel>
      <div
        className="panel panel-default"
      >
        <Heading
          onClick={[Function]}
          style={
            Object {
              "cursor": "pointer",
            }
          }
        >
          <div
            className="panel-heading clearfix "
            onClick={[Function]}
            style={
              Object {
                "cursor": "pointer",
              }
            }
          >
            <Icon
              icon={
                Object {
                  "icon": Array [],
                  "iconName": "calendar",
                  "prefix": "fas",
                }
              }
            >
              <FontAwesomeIcon
                border={false}
                className=""
                fixedWidth={true}
                flip={null}
                icon={
                  Object {
                    "icon": Array [],
                    "iconName": "calendar",
                    "prefix": "fas",
                  }
                }
                inverse={false}
                listItem={false}
                mask={null}
                pull={null}
                pulse={false}
                rotation={null}
                size={null}
                spin={false}
                symbol={false}
                title=""
                transform={null}
              >
                <svg
                  aria-hidden="true"
                  className="svg-inline--fa fa-calendar fa-w-NaN fa-fw "
                  data-icon="calendar"
                  data-prefix="fas"
                  focusable="false"
                  role="img"
                  style={Object {}}
                  viewBox="0 0 undefined undefined"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    fill="currentColor"
                    style={Object {}}
                  />
                </svg>
              </FontAwesomeIcon>
            </Icon>
            <strong>
               
              Test timetable
            </strong>
            <span
              className="pull-right"
            >
              <Icon
                icon={
                  Object {
                    "icon": Array [],
                    "iconName": "caret-right",
                    "prefix": "fas",
                  }
                }
              >
                <FontAwesomeIcon
                  border={false}
                  className=""
                  fixedWidth={true}
                  flip={null}
                  icon={
                    Object {
                      "icon": Array [],
                      "iconName": "caret-right",
                      "prefix": "fas",
                    }
                  }
                  inverse={false}
                  listItem={false}
                  mask={null}
                  pull={null}
                  pulse={false}
                  rotation={null}
                  size={null}
                  spin={false}
                  symbol={false}
                  title=""
                  transform={null}
                >
                  <svg
                    aria-hidden="true"
                    className="svg-inline--fa fa-caret-right fa-w-NaN fa-fw "
                    data-icon="caret-right"
                    data-prefix="fas"
                    focusable="false"
                    role="img"
                    style={Object {}}
                    viewBox="0 0 undefined undefined"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      fill="currentColor"
                      style={Object {}}
                    />
                  </svg>
                </FontAwesomeIcon>
              </Icon>
            </span>
          </div>
        </Heading>
      </div>
    </Panel>
  </Collapsible>
</TimetableComponent>
`;

exports[`Component > Timetable renders correctly 2`] = `
<TimetableComponent
  allPhaseFromTimetableStops={Object {}}
  bidirectional={false}
  modificationStops={Array []}
  numberOfStops={0}
  projectTimetables={Array []}
  qualifiedStops={Array []}
  remove={[MockFunction]}
  segmentDistances={Array []}
  setMapState={[MockFunction]}
  timetable={
    Object {
      "_id": "timetable-id",
      "dwellTime": 10,
      "dwellTimes": Array [
        12,
      ],
      "endTime": 57600,
      "exactTimes": false,
      "friday": true,
      "headwaySecs": 900,
      "modificationId": "1234",
      "modificationName": "Test Modification",
      "monday": true,
      "name": "Test timetable",
      "patternTrips": Array [
        "abcd",
      ],
      "phaseAtStop": "",
      "phaseFromStop": "",
      "phaseFromTimetable": "",
      "phaseSeconds": 300,
      "saturday": false,
      "segmentSpeeds": Array [],
      "sourceTrip": "abcd",
      "startTime": 28800,
      "sunday": false,
      "thursday": true,
      "tuesday": true,
      "wednesday": true,
    }
  }
  update={[MockFunction]}
>
  <Collapsible
    defaultExpanded={false}
    heading={[Function]}
  >
    <Panel>
      <div
        className="panel panel-default"
      >
        <Heading
          onClick={[Function]}
          style={
            Object {
              "cursor": "pointer",
            }
          }
        >
          <div
            className="panel-heading clearfix "
            onClick={[Function]}
            style={
              Object {
                "cursor": "pointer",
              }
            }
          >
            <Icon
              icon={
                Object {
                  "icon": Array [],
                  "iconName": "calendar",
                  "prefix": "fas",
                }
              }
            >
              <FontAwesomeIcon
                border={false}
                className=""
                fixedWidth={true}
                flip={null}
                icon={
                  Object {
                    "icon": Array [],
                    "iconName": "calendar",
                    "prefix": "fas",
                  }
                }
                inverse={false}
                listItem={false}
                mask={null}
                pull={null}
                pulse={false}
                rotation={null}
                size={null}
                spin={false}
                symbol={false}
                title=""
                transform={null}
              >
                <svg
                  aria-hidden="true"
                  className="svg-inline--fa fa-calendar fa-w-NaN fa-fw "
                  data-icon="calendar"
                  data-prefix="fas"
                  focusable="false"
                  role="img"
                  style={Object {}}
                  viewBox="0 0 undefined undefined"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    fill="currentColor"
                    style={Object {}}
                  />
                </svg>
              </FontAwesomeIcon>
            </Icon>
            <strong>
               
              Test timetable
            </strong>
            <span
              className="pull-right"
            >
              <Icon
                icon={
                  Object {
                    "icon": Array [],
                    "iconName": "caret-down",
                    "prefix": "fas",
                  }
                }
              >
                <FontAwesomeIcon
                  border={false}
                  className=""
                  fixedWidth={true}
                  flip={null}
                  icon={
                    Object {
                      "icon": Array [],
                      "iconName": "caret-down",
                      "prefix": "fas",
                    }
                  }
                  inverse={false}
                  listItem={false}
                  mask={null}
                  pull={null}
                  pulse={false}
                  rotation={null}
                  size={null}
                  spin={false}
                  symbol={false}
                  title=""
                  transform={null}
                >
                  <svg
                    aria-hidden="true"
                    className="svg-inline--fa fa-caret-down fa-w-NaN fa-fw "
                    data-icon="caret-down"
                    data-prefix="fas"
                    focusable="false"
                    role="img"
                    style={Object {}}
                    viewBox="0 0 undefined undefined"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      fill="currentColor"
                      style={Object {}}
                    />
                  </svg>
                </FontAwesomeIcon>
              </Icon>
            </span>
          </div>
        </Heading>
        <Body>
          <div
            className="panel-body"
          >
            <Text
              name="Name"
              onChange={[Function]}
              value="Test timetable"
            >
              <Group
                id="name-input-0"
                name="Name"
                onChange={[Function]}
                value="Test timetable"
              >
                <div
                  className="form-group"
                >
                  <Input
                    id="name-input-0"
                    name="Name"
                    onChange={[Function]}
                    type="text"
                    value="Test timetable"
                  >
                    <input
                      className="form-control"
                      id="name-input-0"
                      name="Name"
                      onChange={[Function]}
                      placeholder="Name"
                      type="text"
                      value="Test timetable"
                    />
                  </Input>
                </div>
              </Group>
            </Text>
            <TimetableEntry
              allPhaseFromTimetableStops={Object {}}
              bidirectional={false}
              modificationStops={Array []}
              projectTimetables={Array []}
              timetable={
                Object {
                  "_id": "timetable-id",
                  "dwellTime": 10,
                  "dwellTimes": Array [
                    12,
                  ],
                  "endTime": 57600,
                  "exactTimes": false,
                  "friday": true,
                  "headwaySecs": 900,
                  "modificationId": "1234",
                  "modificationName": "Test Modification",
                  "monday": true,
                  "name": "Test timetable",
                  "patternTrips": Array [
                    "abcd",
                  ],
                  "phaseAtStop": "",
                  "phaseFromStop": "",
                  "phaseFromTimetable": "",
                  "phaseSeconds": 300,
                  "saturday": false,
                  "segmentSpeeds": Array [],
                  "sourceTrip": "abcd",
                  "startTime": 28800,
                  "sunday": false,
                  "thursday": true,
                  "tuesday": true,
                  "wednesday": true,
                }
              }
              update={[MockFunction]}
            >
              <Days
                setDay={[Function]}
                timetable={
                  Object {
                    "_id": "timetable-id",
                    "dwellTime": 10,
                    "dwellTimes": Array [
                      12,
                    ],
                    "endTime": 57600,
                    "exactTimes": false,
                    "friday": true,
                    "headwaySecs": 900,
                    "modificationId": "1234",
                    "modificationName": "Test Modification",
                    "monday": true,
                    "name": "Test timetable",
                    "patternTrips": Array [
                      "abcd",
                    ],
                    "phaseAtStop": "",
                    "phaseFromStop": "",
                    "phaseFromTimetable": "",
                    "phaseSeconds": 300,
                    "saturday": false,
                    "segmentSpeeds": Array [],
                    "sourceTrip": "abcd",
                    "startTime": 28800,
                    "sunday": false,
                    "thursday": true,
                    "tuesday": true,
                    "wednesday": true,
                  }
                }
              >
                <div
                  className="form-group"
                >
                  <label>
                    Days active
                  </label>
                  <div
                    className="form-inline"
                  >
                    <Checkbox
                      checked={true}
                      key="monday-checkbox"
                      label="Mon"
                      onChange={[Function]}
                    >
                      <div
                        className="checkbox"
                      >
                        <label
                          htmlFor="mon-input-1"
                        >
                          <input
                            checked={true}
                            id="mon-input-1"
                            label="Mon"
                            onChange={[Function]}
                            type="checkbox"
                          />
                           
                          Mon
                        </label>
                      </div>
                    </Checkbox>
                    <Checkbox
                      checked={true}
                      key="tuesday-checkbox"
                      label="Tue"
                      onChange={[Function]}
                    >
                      <div
                        className="checkbox"
                      >
                        <label
                          htmlFor="tue-input-2"
                        >
                          <input
                            checked={true}
                            id="tue-input-2"
                            label="Tue"
                            onChange={[Function]}
                            type="checkbox"
                          />
                           
                          Tue
                        </label>
                      </div>
                    </Checkbox>
                    <Checkbox
                      checked={true}
                      key="wednesday-checkbox"
                      label="Wed"
                      onChange={[Function]}
                    >
                      <div
                        className="checkbox"
                      >
                        <label
                          htmlFor="wed-input-3"
                        >
                          <input
                            checked={true}
                            id="wed-input-3"
                            label="Wed"
                            onChange={[Function]}
                            type="checkbox"
                          />
                           
                          Wed
                        </label>
                      </div>
                    </Checkbox>
                    <Checkbox
                      checked={true}
                      key="thursday-checkbox"
                      label="Thu"
                      onChange={[Function]}
                    >
                      <div
                        className="checkbox"
                      >
                        <label
                          htmlFor="thu-input-4"
                        >
                          <input
                            checked={true}
                            id="thu-input-4"
                            label="Thu"
                            onChange={[Function]}
                            type="checkbox"
                          />
                           
                          Thu
                        </label>
                      </div>
                    </Checkbox>
                    <Checkbox
                      checked={true}
                      key="friday-checkbox"
                      label="Fri"
                      onChange={[Function]}
                    >
                      <div
                        className="checkbox"
                      >
                        <label
                          htmlFor="fri-input-5"
                        >
                          <input
                            checked={true}
                            id="fri-input-5"
                            label="Fri"
                            onChange={[Function]}
                            type="checkbox"
                          />
                           
                          Fri
                        </label>
                      </div>
                    </Checkbox>
                    <Checkbox
                      checked={false}
                      key="saturday-checkbox"
                      label="Sat"
                      onChange={[Function]}
                    >
                      <div
                        className="checkbox"
                      >
                        <label
                          htmlFor="sat-input-6"
                        >
                          <input
                            checked={false}
                            id="sat-input-6"
                            label="Sat"
                            onChange={[Function]}
                            type="checkbox"
                          />
                           
                          Sat
                        </label>
                      </div>
                    </Checkbox>
                    <Checkbox
                      checked={false}
                      key="sunday-checkbox"
                      label="Sun"
                      onChange={[Function]}
                    >
                      <div
                        className="checkbox"
                      >
                        <label
                          htmlFor="sun-input-7"
                        >
                          <input
                            checked={false}
                            id="sun-input-7"
                            label="Sun"
                            onChange={[Function]}
                            type="checkbox"
                          />
                           
                          Sun
                        </label>
                      </div>
                    </Checkbox>
                  </div>
                </div>
              </Days>
              <MinutesSeconds
                label="Frequency"
                onChange={[Function]}
                seconds={900}
              >
                <Text
                  label="Frequency"
                  onBlur={[Function]}
                  onChange={[Function]}
                  onKeyDown={[Function]}
                  units="mm:ss"
                  value="15:00"
                >
                  <Group
                    id="frequency-input-8"
                    label="Frequency"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onKeyDown={[Function]}
                    units="mm:ss"
                    value="15:00"
                  >
                    <div
                      className="form-group"
                    >
                      <label
                        htmlFor="frequency-input-8"
                      >
                        Frequency
                      </label>
                      <Input
                        id="frequency-input-8"
                        label="Frequency"
                        onBlur={[Function]}
                        onChange={[Function]}
                        onKeyDown={[Function]}
                        type="text"
                        units="mm:ss"
                        value="15:00"
                      >
                        <div
                          className="InputWithUnits"
                        >
                          <input
                            className="form-control"
                            id="frequency-input-8"
                            label="Frequency"
                            onBlur={[Function]}
                            onChange={[Function]}
                            onKeyDown={[Function]}
                            placeholder="mm:ss"
                            type="text"
                            units="mm:ss"
                            value="15:00"
                          />
                          <span
                            className="InputUnits"
                          >
                            mm:ss
                          </span>
                        </div>
                      </Input>
                    </div>
                  </Group>
                </Text>
              </MinutesSeconds>
              <TimePicker
                label="Start time"
                onChange={[Function]}
                value={28800}
              >
                <Text
                  label="Start time"
                  onChange={[Function]}
                  onWheel={[Function]}
                  type="time"
                  units="hh:mm"
                  value="08:00"
                >
                  <Group
                    id="start-time-input-9"
                    label="Start time"
                    onChange={[Function]}
                    onWheel={[Function]}
                    type="time"
                    units="hh:mm"
                    value="08:00"
                  >
                    <div
                      className="form-group"
                    >
                      <label
                        htmlFor="start-time-input-9"
                      >
                        Start time
                      </label>
                      <Input
                        id="start-time-input-9"
                        label="Start time"
                        onChange={[Function]}
                        onWheel={[Function]}
                        type="time"
                        units="hh:mm"
                        value="08:00"
                      >
                        <div
                          className="InputWithUnits"
                        >
                          <input
                            className="form-control"
                            id="start-time-input-9"
                            label="Start time"
                            onChange={[Function]}
                            onWheel={[Function]}
                            placeholder="hh:mm"
                            type="time"
                            units="hh:mm"
                            value="08:00"
                          />
                          <span
                            className="InputUnits"
                          >
                            hh:mm
                          </span>
                        </div>
                      </Input>
                    </div>
                  </Group>
                </Text>
              </TimePicker>
              <TimePicker
                label="End time"
                onChange={[Function]}
                value={57600}
              >
                <Text
                  label="End time"
                  onChange={[Function]}
                  onWheel={[Function]}
                  type="time"
                  units="hh:mm"
                  value="16:00"
                >
                  <Group
                    id="end-time-input-10"
                    label="End time"
                    onChange={[Function]}
                    onWheel={[Function]}
                    type="time"
                    units="hh:mm"
                    value="16:00"
                  >
                    <div
                      className="form-group"
                    >
                      <label
                        htmlFor="end-time-input-10"
                      >
                        End time
                      </label>
                      <Input
                        id="end-time-input-10"
                        label="End time"
                        onChange={[Function]}
                        onWheel={[Function]}
                        type="time"
                        units="hh:mm"
                        value="16:00"
                      >
                        <div
                          className="InputWithUnits"
                        >
                          <input
                            className="form-control"
                            id="end-time-input-10"
                            label="End time"
                            onChange={[Function]}
                            onWheel={[Function]}
                            placeholder="hh:mm"
                            type="time"
                            units="hh:mm"
                            value="16:00"
                          />
                          <span
                            className="InputUnits"
                          >
                            hh:mm
                          </span>
                        </div>
                      </Input>
                    </div>
                  </Group>
                </Text>
              </TimePicker>
              <Checkbox
                checked={false}
                disabled={false}
                label="Times are exact"
                onChange={[Function]}
              >
                <div
                  className="checkbox"
                >
                  <label
                    htmlFor="times-are-exact-input-11"
                  >
                    <input
                      checked={false}
                      disabled={false}
                      id="times-are-exact-input-11"
                      label="Times are exact"
                      onChange={[Function]}
                      type="checkbox"
                    />
                     
                    Times are exact
                  </label>
                </div>
              </Checkbox>
              <Phase
                availableTimetables={Array []}
                disabled={false}
                modificationStops={Array []}
                phaseAtStop=""
                phaseFromStop=""
                phaseFromTimetable=""
                phaseSeconds={300}
                timetableHeadway={900}
                update={[MockFunction]}
              >
                <Group
                  label="Phase at stop"
                >
                  <div
                    className="form-group"
                  >
                    <label
                      htmlFor="phase-at-stop-input-12"
                    >
                      Phase at stop
                    </label>
                    <S
                      disabled={false}
                      getOptionLabel={[Function]}
                      getOptionValue={[Function]}
                      name="Phase at stop"
                      onChange={[Function]}
                      options={Array []}
                      placeholder="Phase at stop"
                    >
                      <ReactSelect
                        disabled={false}
                        getOptionLabel={[Function]}
                        getOptionValue={[Function]}
                        name="Phase at stop"
                        onChange={[Function]}
                        options={Array []}
                        placeholder="Phase at stop"
                        styles={
                          Object {
                            "control": [Function],
                            "option": [Function],
                          }
                        }
                      >
                        <div
                          className="ReactSelectMock"
                        />
                      </ReactSelect>
                    </S>
                  </div>
                </Group>
              </Phase>
            </TimetableEntry>
            <SegmentSpeeds
              dwellTime={10}
              dwellTimes={
                Array [
                  12,
                ]
              }
              highlightSegment={[Function]}
              highlightStop={[Function]}
              numberOfStops={0}
              qualifiedStops={Array []}
              segmentDistances={Array []}
              segmentSpeeds={Array []}
              update={[MockFunction]}
            >
              <div>
                <MinutesSeconds
                  label="Default dwell time"
                  onChange={[Function]}
                  seconds={10}
                >
                  <Text
                    label="Default dwell time"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onKeyDown={[Function]}
                    units="mm:ss"
                    value="00:10"
                  >
                    <Group
                      id="default-dwell-time-input-13"
                      label="Default dwell time"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onKeyDown={[Function]}
                      units="mm:ss"
                      value="00:10"
                    >
                      <div
                        className="form-group"
                      >
                        <label
                          htmlFor="default-dwell-time-input-13"
                        >
                          Default dwell time
                        </label>
                        <Input
                          id="default-dwell-time-input-13"
                          label="Default dwell time"
                          onBlur={[Function]}
                          onChange={[Function]}
                          onKeyDown={[Function]}
                          type="text"
                          units="mm:ss"
                          value="00:10"
                        >
                          <div
                            className="InputWithUnits"
                          >
                            <input
                              className="form-control"
                              id="default-dwell-time-input-13"
                              label="Default dwell time"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onKeyDown={[Function]}
                              placeholder="mm:ss"
                              type="text"
                              units="mm:ss"
                              value="00:10"
                            />
                            <span
                              className="InputUnits"
                            >
                              mm:ss
                            </span>
                          </div>
                        </Input>
                      </div>
                    </Group>
                  </Text>
                </MinutesSeconds>
                <p>
                  The default time table dwell time will be used for each stop that does not have a custom one set.
                </p>
                <Collapsible
                  title="Set individual stop dwell times"
                >
                  <a
                    className="CollapsibleButton"
                    onClick={[Function]}
                    role="button"
                    tabIndex={0}
                  >
                    <Icon
                      icon={
                        Object {
                          "icon": Array [],
                          "iconName": "caret-right",
                          "prefix": "fas",
                        }
                      }
                    >
                      <FontAwesomeIcon
                        border={false}
                        className=""
                        fixedWidth={true}
                        flip={null}
                        icon={
                          Object {
                            "icon": Array [],
                            "iconName": "caret-right",
                            "prefix": "fas",
                          }
                        }
                        inverse={false}
                        listItem={false}
                        mask={null}
                        pull={null}
                        pulse={false}
                        rotation={null}
                        size={null}
                        spin={false}
                        symbol={false}
                        title=""
                        transform={null}
                      >
                        <svg
                          aria-hidden="true"
                          className="svg-inline--fa fa-caret-right fa-w-NaN fa-fw "
                          data-icon="caret-right"
                          data-prefix="fas"
                          focusable="false"
                          role="img"
                          style={Object {}}
                          viewBox="0 0 undefined undefined"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            fill="currentColor"
                            style={Object {}}
                          />
                        </svg>
                      </FontAwesomeIcon>
                    </Icon>
                    Set individual stop dwell times
                  </a>
                </Collapsible>
                <NumberInput
                  label="Average speed (along added segments)"
                  min={1}
                  onChange={[Function]}
                  units="km/h"
                  value={15}
                >
                  <Group
                    id="average-speed-along-added-segments-input-14"
                    label="Average speed (along added segments)"
                    min={1}
                    onChange={[Function]}
                    units="km/h"
                    value={15}
                  >
                    <div
                      className="form-group"
                    >
                      <label
                        htmlFor="average-speed-along-added-segments-input-14"
                      >
                        Average speed (along added segments)
                      </label>
                      <Input
                        id="average-speed-along-added-segments-input-14"
                        label="Average speed (along added segments)"
                        min={1}
                        onChange={[Function]}
                        onWheel={[Function]}
                        type="number"
                        units="km/h"
                        value={15}
                      >
                        <div
                          className="InputWithUnits"
                        >
                          <input
                            className="form-control"
                            id="average-speed-along-added-segments-input-14"
                            label="Average speed (along added segments)"
                            min={1}
                            onChange={[Function]}
                            onWheel={[Function]}
                            placeholder="km/h"
                            type="number"
                            units="km/h"
                            value={15}
                          />
                          <span
                            className="InputUnits"
                          >
                            km/h
                          </span>
                        </div>
                      </Input>
                    </div>
                  </Group>
                </NumberInput>
                <MinutesSeconds
                  label="Total travel time (added segments)"
                  onChange={[Function]}
                  seconds={0}
                >
                  <Text
                    label="Total travel time (added segments)"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onKeyDown={[Function]}
                    units="mm:ss"
                    value="00:00"
                  >
                    <Group
                      id="total-travel-time-added-segments-input-15"
                      label="Total travel time (added segments)"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onKeyDown={[Function]}
                      units="mm:ss"
                      value="00:00"
                    >
                      <div
                        className="form-group"
                      >
                        <label
                          htmlFor="total-travel-time-added-segments-input-15"
                        >
                          Total travel time (added segments)
                        </label>
                        <Input
                          id="total-travel-time-added-segments-input-15"
                          label="Total travel time (added segments)"
                          onBlur={[Function]}
                          onChange={[Function]}
                          onKeyDown={[Function]}
                          type="text"
                          units="mm:ss"
                          value="00:00"
                        >
                          <div
                            className="InputWithUnits"
                          >
                            <input
                              className="form-control"
                              id="total-travel-time-added-segments-input-15"
                              label="Total travel time (added segments)"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onKeyDown={[Function]}
                              placeholder="mm:ss"
                              type="text"
                              units="mm:ss"
                              value="00:00"
                            />
                            <span
                              className="InputUnits"
                            >
                              mm:ss
                            </span>
                          </div>
                        </Input>
                      </div>
                    </Group>
                  </Text>
                </MinutesSeconds>
                <Collapsible
                  title="Set individual segment speeds"
                >
                  <a
                    className="CollapsibleButton"
                    onClick={[Function]}
                    role="button"
                    tabIndex={0}
                  >
                    <Icon
                      icon={
                        Object {
                          "icon": Array [],
                          "iconName": "caret-right",
                          "prefix": "fas",
                        }
                      }
                    >
                      <FontAwesomeIcon
                        border={false}
                        className=""
                        fixedWidth={true}
                        flip={null}
                        icon={
                          Object {
                            "icon": Array [],
                            "iconName": "caret-right",
                            "prefix": "fas",
                          }
                        }
                        inverse={false}
                        listItem={false}
                        mask={null}
                        pull={null}
                        pulse={false}
                        rotation={null}
                        size={null}
                        spin={false}
                        symbol={false}
                        title=""
                        transform={null}
                      >
                        <svg
                          aria-hidden="true"
                          className="svg-inline--fa fa-caret-right fa-w-NaN fa-fw "
                          data-icon="caret-right"
                          data-prefix="fas"
                          focusable="false"
                          role="img"
                          style={Object {}}
                          viewBox="0 0 undefined undefined"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            fill="currentColor"
                            style={Object {}}
                          />
                        </svg>
                      </FontAwesomeIcon>
                    </Icon>
                    Set individual segment speeds
                  </a>
                </Collapsible>
              </div>
            </SegmentSpeeds>
            <Button
              block={true}
              onClick={[Function]}
              style="danger"
              title="Delete timetable"
            >
              <a
                className="btn btn-danger btn-block"
                href="#"
                onClick={[Function]}
                tabIndex={0}
                title="Delete timetable"
              >
                <Icon
                  icon={
                    Object {
                      "icon": Array [],
                      "iconName": "times",
                      "prefix": "fas",
                    }
                  }
                >
                  <FontAwesomeIcon
                    border={false}
                    className=""
                    fixedWidth={true}
                    flip={null}
                    icon={
                      Object {
                        "icon": Array [],
                        "iconName": "times",
                        "prefix": "fas",
                      }
                    }
                    inverse={false}
                    listItem={false}
                    mask={null}
                    pull={null}
                    pulse={false}
                    rotation={null}
                    size={null}
                    spin={false}
                    symbol={false}
                    title=""
                    transform={null}
                  >
                    <svg
                      aria-hidden="true"
                      className="svg-inline--fa fa-times fa-w-NaN fa-fw "
                      data-icon="times"
                      data-prefix="fas"
                      focusable="false"
                      role="img"
                      style={Object {}}
                      viewBox="0 0 undefined undefined"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        fill="currentColor"
                        style={Object {}}
                      />
                    </svg>
                  </FontAwesomeIcon>
                </Icon>
                 Delete Timetable
              </a>
            </Button>
          </div>
        </Body>
      </div>
    </Panel>
  </Collapsible>
</TimetableComponent>
`;
