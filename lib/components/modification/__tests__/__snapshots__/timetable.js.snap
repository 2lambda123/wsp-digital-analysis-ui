// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Component > Timetable renders correctly 1`] = `
<TimetableComponent
  allPhaseFromTimetableStops={Object {}}
  bidirectional={false}
  modificationStops={Array []}
  numberOfStops={0}
  projectTimetables={Array []}
  qualifiedStops={Array []}
  remove={[MockFunction]}
  segmentDistances={Array []}
  setMapState={[MockFunction]}
  timetable={
    Object {
      "_id": "timetable-id",
      "dwellTime": 10,
      "dwellTimes": Array [
        12,
      ],
      "endTime": 57600,
      "exactTimes": false,
      "friday": true,
      "headwaySecs": 900,
      "modificationId": "1234",
      "modificationName": "Test Modification",
      "monday": true,
      "name": "Test timetable",
      "patternTrips": Array [
        "abcd",
      ],
      "phaseAtStop": "",
      "phaseFromStop": "",
      "phaseFromTimetable": "",
      "phaseSeconds": 300,
      "saturday": false,
      "segmentSpeeds": Array [],
      "sourceTrip": "abcd",
      "startTime": 28800,
      "sunday": false,
      "thursday": true,
      "tuesday": true,
      "wednesday": true,
    }
  }
  update={[MockFunction]}
>
  <Collapsible
    defaultExpanded={false}
    heading={[Function]}
  >
    <Panel>
      <div
        className="panel panel-default"
      >
        <Heading
          onClick={[Function]}
          style={
            Object {
              "cursor": "pointer",
            }
          }
        >
          <div
            className="panel-heading clearfix "
            onClick={[Function]}
            style={
              Object {
                "cursor": "pointer",
              }
            }
          >
            <Icon
              icon={
                Object {
                  "icon": Array [],
                  "iconName": "calendar",
                  "prefix": "fas",
                }
              }
            >
              <FontAwesomeIcon
                border={false}
                className=""
                fixedWidth={true}
                flip={null}
                icon={
                  Object {
                    "icon": Array [],
                    "iconName": "calendar",
                    "prefix": "fas",
                  }
                }
                inverse={false}
                listItem={false}
                mask={null}
                pull={null}
                pulse={false}
                rotation={null}
                size={null}
                spin={false}
                swapOpacity={false}
                symbol={false}
                title=""
                transform={null}
              >
                <svg
                  aria-hidden="true"
                  className="svg-inline--fa fa-calendar fa-w-NaN fa-fw "
                  data-icon="calendar"
                  data-prefix="fas"
                  focusable="false"
                  role="img"
                  style={Object {}}
                  viewBox="0 0 undefined undefined"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    fill="currentColor"
                    style={Object {}}
                  />
                </svg>
              </FontAwesomeIcon>
            </Icon>
            <strong>
               
              Test timetable
            </strong>
            <span
              className="pull-right"
            >
              <Icon
                icon={
                  Object {
                    "icon": Array [],
                    "iconName": "caret-right",
                    "prefix": "fas",
                  }
                }
              >
                <FontAwesomeIcon
                  border={false}
                  className=""
                  fixedWidth={true}
                  flip={null}
                  icon={
                    Object {
                      "icon": Array [],
                      "iconName": "caret-right",
                      "prefix": "fas",
                    }
                  }
                  inverse={false}
                  listItem={false}
                  mask={null}
                  pull={null}
                  pulse={false}
                  rotation={null}
                  size={null}
                  spin={false}
                  swapOpacity={false}
                  symbol={false}
                  title=""
                  transform={null}
                >
                  <svg
                    aria-hidden="true"
                    className="svg-inline--fa fa-caret-right fa-w-NaN fa-fw "
                    data-icon="caret-right"
                    data-prefix="fas"
                    focusable="false"
                    role="img"
                    style={Object {}}
                    viewBox="0 0 undefined undefined"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      fill="currentColor"
                      style={Object {}}
                    />
                  </svg>
                </FontAwesomeIcon>
              </Icon>
            </span>
          </div>
        </Heading>
      </div>
    </Panel>
  </Collapsible>
</TimetableComponent>
`;

exports[`Component > Timetable renders correctly 2`] = `
<TimetableComponent
  allPhaseFromTimetableStops={Object {}}
  bidirectional={false}
  modificationStops={Array []}
  numberOfStops={0}
  projectTimetables={Array []}
  qualifiedStops={Array []}
  remove={[MockFunction]}
  segmentDistances={Array []}
  setMapState={[MockFunction]}
  timetable={
    Object {
      "_id": "timetable-id",
      "dwellTime": 10,
      "dwellTimes": Array [
        12,
      ],
      "endTime": 57600,
      "exactTimes": false,
      "friday": true,
      "headwaySecs": 900,
      "modificationId": "1234",
      "modificationName": "Test Modification",
      "monday": true,
      "name": "Test timetable",
      "patternTrips": Array [
        "abcd",
      ],
      "phaseAtStop": "",
      "phaseFromStop": "",
      "phaseFromTimetable": "",
      "phaseSeconds": 300,
      "saturday": false,
      "segmentSpeeds": Array [],
      "sourceTrip": "abcd",
      "startTime": 28800,
      "sunday": false,
      "thursday": true,
      "tuesday": true,
      "wednesday": true,
    }
  }
  update={[MockFunction]}
>
  <Collapsible
    defaultExpanded={false}
    heading={[Function]}
  >
    <Panel>
      <div
        className="panel panel-default"
      >
        <Heading
          onClick={[Function]}
          style={
            Object {
              "cursor": "pointer",
            }
          }
        >
          <div
            className="panel-heading clearfix "
            onClick={[Function]}
            style={
              Object {
                "cursor": "pointer",
              }
            }
          >
            <Icon
              icon={
                Object {
                  "icon": Array [],
                  "iconName": "calendar",
                  "prefix": "fas",
                }
              }
            >
              <FontAwesomeIcon
                border={false}
                className=""
                fixedWidth={true}
                flip={null}
                icon={
                  Object {
                    "icon": Array [],
                    "iconName": "calendar",
                    "prefix": "fas",
                  }
                }
                inverse={false}
                listItem={false}
                mask={null}
                pull={null}
                pulse={false}
                rotation={null}
                size={null}
                spin={false}
                swapOpacity={false}
                symbol={false}
                title=""
                transform={null}
              >
                <svg
                  aria-hidden="true"
                  className="svg-inline--fa fa-calendar fa-w-NaN fa-fw "
                  data-icon="calendar"
                  data-prefix="fas"
                  focusable="false"
                  role="img"
                  style={Object {}}
                  viewBox="0 0 undefined undefined"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    fill="currentColor"
                    style={Object {}}
                  />
                </svg>
              </FontAwesomeIcon>
            </Icon>
            <strong>
               
              Test timetable
            </strong>
            <span
              className="pull-right"
            >
              <Icon
                icon={
                  Object {
                    "icon": Array [],
                    "iconName": "caret-down",
                    "prefix": "fas",
                  }
                }
              >
                <FontAwesomeIcon
                  border={false}
                  className=""
                  fixedWidth={true}
                  flip={null}
                  icon={
                    Object {
                      "icon": Array [],
                      "iconName": "caret-down",
                      "prefix": "fas",
                    }
                  }
                  inverse={false}
                  listItem={false}
                  mask={null}
                  pull={null}
                  pulse={false}
                  rotation={null}
                  size={null}
                  spin={false}
                  swapOpacity={false}
                  symbol={false}
                  title=""
                  transform={null}
                >
                  <svg
                    aria-hidden="true"
                    className="svg-inline--fa fa-caret-down fa-w-NaN fa-fw "
                    data-icon="caret-down"
                    data-prefix="fas"
                    focusable="false"
                    role="img"
                    style={Object {}}
                    viewBox="0 0 undefined undefined"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      fill="currentColor"
                      style={Object {}}
                    />
                  </svg>
                </FontAwesomeIcon>
              </Icon>
            </span>
          </div>
        </Heading>
        <Body>
          <div
            className="panel-body"
          >
            <Text
              name="Name"
              onChange={[Function]}
              value="Test timetable"
            >
              <Group
                id="name-input-0"
                name="Name"
                onChange={[Function]}
                value="Test timetable"
              >
                <div
                  className="form-group"
                >
                  <ForwardRef
                    id="name-input-0"
                    name="Name"
                    onChange={[Function]}
                    type="text"
                    value="Test timetable"
                  >
                    <input
                      className="form-control"
                      id="name-input-0"
                      name="Name"
                      onChange={[Function]}
                      type="text"
                      value="Test timetable"
                    />
                  </ForwardRef>
                </div>
              </Group>
            </Text>
            <TimetableEntry
              bidirectional={false}
              modificationStops={Array []}
              projectTimetables={Array []}
              timetable={
                Object {
                  "_id": "timetable-id",
                  "dwellTime": 10,
                  "dwellTimes": Array [
                    12,
                  ],
                  "endTime": 57600,
                  "exactTimes": false,
                  "friday": true,
                  "headwaySecs": 900,
                  "modificationId": "1234",
                  "modificationName": "Test Modification",
                  "monday": true,
                  "name": "Test timetable",
                  "patternTrips": Array [
                    "abcd",
                  ],
                  "phaseAtStop": "",
                  "phaseFromStop": "",
                  "phaseFromTimetable": "",
                  "phaseSeconds": 300,
                  "saturday": false,
                  "segmentSpeeds": Array [],
                  "sourceTrip": "abcd",
                  "startTime": 28800,
                  "sunday": false,
                  "thursday": true,
                  "tuesday": true,
                  "wednesday": true,
                }
              }
              update={[MockFunction]}
            >
              <Days
                setDay={[Function]}
                timetable={
                  Object {
                    "_id": "timetable-id",
                    "dwellTime": 10,
                    "dwellTimes": Array [
                      12,
                    ],
                    "endTime": 57600,
                    "exactTimes": false,
                    "friday": true,
                    "headwaySecs": 900,
                    "modificationId": "1234",
                    "modificationName": "Test Modification",
                    "monday": true,
                    "name": "Test timetable",
                    "patternTrips": Array [
                      "abcd",
                    ],
                    "phaseAtStop": "",
                    "phaseFromStop": "",
                    "phaseFromTimetable": "",
                    "phaseSeconds": 300,
                    "saturday": false,
                    "segmentSpeeds": Array [],
                    "sourceTrip": "abcd",
                    "startTime": 28800,
                    "sunday": false,
                    "thursday": true,
                    "tuesday": true,
                    "wednesday": true,
                  }
                }
              >
                <div
                  className="form-group"
                >
                  <label>
                    Days active
                  </label>
                  <div
                    className="form-inline"
                  >
                    <Checkbox
                      checked={true}
                      key="monday-checkbox"
                      label="Mon"
                      onChange={[Function]}
                    >
                      <div
                        className="checkbox"
                      >
                        <label
                          htmlFor="mon-input-1"
                        >
                          <input
                            checked={true}
                            id="mon-input-1"
                            label="Mon"
                            onChange={[Function]}
                            type="checkbox"
                          />
                           
                          Mon
                        </label>
                      </div>
                    </Checkbox>
                    <Checkbox
                      checked={true}
                      key="tuesday-checkbox"
                      label="Tue"
                      onChange={[Function]}
                    >
                      <div
                        className="checkbox"
                      >
                        <label
                          htmlFor="tue-input-2"
                        >
                          <input
                            checked={true}
                            id="tue-input-2"
                            label="Tue"
                            onChange={[Function]}
                            type="checkbox"
                          />
                           
                          Tue
                        </label>
                      </div>
                    </Checkbox>
                    <Checkbox
                      checked={true}
                      key="wednesday-checkbox"
                      label="Wed"
                      onChange={[Function]}
                    >
                      <div
                        className="checkbox"
                      >
                        <label
                          htmlFor="wed-input-3"
                        >
                          <input
                            checked={true}
                            id="wed-input-3"
                            label="Wed"
                            onChange={[Function]}
                            type="checkbox"
                          />
                           
                          Wed
                        </label>
                      </div>
                    </Checkbox>
                    <Checkbox
                      checked={true}
                      key="thursday-checkbox"
                      label="Thu"
                      onChange={[Function]}
                    >
                      <div
                        className="checkbox"
                      >
                        <label
                          htmlFor="thu-input-4"
                        >
                          <input
                            checked={true}
                            id="thu-input-4"
                            label="Thu"
                            onChange={[Function]}
                            type="checkbox"
                          />
                           
                          Thu
                        </label>
                      </div>
                    </Checkbox>
                    <Checkbox
                      checked={true}
                      key="friday-checkbox"
                      label="Fri"
                      onChange={[Function]}
                    >
                      <div
                        className="checkbox"
                      >
                        <label
                          htmlFor="fri-input-5"
                        >
                          <input
                            checked={true}
                            id="fri-input-5"
                            label="Fri"
                            onChange={[Function]}
                            type="checkbox"
                          />
                           
                          Fri
                        </label>
                      </div>
                    </Checkbox>
                    <Checkbox
                      checked={false}
                      key="saturday-checkbox"
                      label="Sat"
                      onChange={[Function]}
                    >
                      <div
                        className="checkbox"
                      >
                        <label
                          htmlFor="sat-input-6"
                        >
                          <input
                            checked={false}
                            id="sat-input-6"
                            label="Sat"
                            onChange={[Function]}
                            type="checkbox"
                          />
                           
                          Sat
                        </label>
                      </div>
                    </Checkbox>
                    <Checkbox
                      checked={false}
                      key="sunday-checkbox"
                      label="Sun"
                      onChange={[Function]}
                    >
                      <div
                        className="checkbox"
                      >
                        <label
                          htmlFor="sun-input-7"
                        >
                          <input
                            checked={false}
                            id="sun-input-7"
                            label="Sun"
                            onChange={[Function]}
                            type="checkbox"
                          />
                           
                          Sun
                        </label>
                      </div>
                    </Checkbox>
                  </div>
                </div>
              </Days>
              <MinutesSeconds
                id="timetableFrequency"
                label="Frequency"
                onChange={[Function]}
                seconds={900}
              >
                <Group
                  className=""
                  id="timetableFrequency"
                  label="Frequency"
                >
                  <div
                    className="form-group"
                  >
                    <label
                      className="control-label"
                      htmlFor="timetableFrequency"
                    >
                      Frequency
                    </label>
                    <ForwardRef
                      htmlFor="00000000-0000-0000-0000-000000000000"
                      id="timetableFrequency"
                      isInvalid={false}
                      isValid={true}
                      onChange={[Function]}
                      type="text"
                      units="hh:mm:ss"
                      value="00:15:00"
                    >
                      <div
                        className="InputWithUnits"
                      >
                        <input
                          className="form-control"
                          htmlFor="00000000-0000-0000-0000-000000000000"
                          id="timetableFrequency"
                          isInvalid={false}
                          isValid={true}
                          onChange={[Function]}
                          type="text"
                          units="hh:mm:ss"
                          value="00:15:00"
                        />
                        <span
                          className="InputUnits"
                        >
                          hh:mm:ss
                        </span>
                      </div>
                    </ForwardRef>
                  </div>
                </Group>
              </MinutesSeconds>
              <TimePicker
                label="Start time"
                onChange={[Function]}
                pb={3}
                value={28800}
              >
                <FormControl
                  isInvalid={false}
                  pb={3}
                >
                  <Box
                    pb={3}
                    role="group"
                  >
                    <div
                      className="css-1v4j5c2"
                      role="group"
                    >
                      <FormLabel
                        htmlFor="00000000-0000-0000-0000-000000000000"
                      >
                        <Box
                          as="label"
                          display="inline-block"
                          fontSize="md"
                          fontWeight="medium"
                          htmlFor="00000000-0000-0000-0000-000000000000"
                          opacity="1"
                          pb="4px"
                          pr="12px"
                          textAlign="left"
                          verticalAlign="middle"
                        >
                          <label
                            className="css-176s5fq"
                            htmlFor="00000000-0000-0000-0000-000000000000"
                          >
                            Start time
                          </label>
                        </Box>
                      </FormLabel>
                      <InputGroup>
                        <Box
                          display="flex"
                          position="relative"
                        >
                          <div
                            className="css-kjafn5"
                          >
                            <Input
                              as="input"
                              errorBorderColor="red.500"
                              focusBorderColor="blue.500"
                              htmlFor="00000000-0000-0000-0000-000000000000"
                              id="00000000-0000-0000-0000-000000000000"
                              isFullWidth={true}
                              isInvalid={false}
                              isValid={true}
                              key=".0"
                              onChange={[Function]}
                              pl={null}
                              pr={null}
                              size="md"
                              type="text"
                              value="08:00"
                              variant="outline"
                            >
                              <PseudoBox
                                _disabled={
                                  Object {
                                    "cursor": "not-allowed",
                                    "opacity": "0.4",
                                  }
                                }
                                _focus={
                                  Object {
                                    "borderColor": "#3182ce",
                                    "boxShadow": "0 0 0 1px #3182ce",
                                    "zIndex": 1,
                                  }
                                }
                                _hover={
                                  Object {
                                    "borderColor": "gray.300",
                                  }
                                }
                                _invalid={
                                  Object {
                                    "borderColor": "#e53e3e",
                                    "boxShadow": "0 0 0 1px #e53e3e",
                                  }
                                }
                                _readOnly={
                                  Object {
                                    "bg": "transparent",
                                    "boxShadow": "none !important",
                                    "userSelect": "all",
                                  }
                                }
                                alignItems="center"
                                appearance="none"
                                aria-invalid={false}
                                as="input"
                                bg="white"
                                border="1px"
                                borderColor="inherit"
                                display="flex"
                                fontSize="md"
                                height={10}
                                htmlFor="00000000-0000-0000-0000-000000000000"
                                id="00000000-0000-0000-0000-000000000000"
                                isValid={true}
                                onChange={[Function]}
                                outline="none"
                                pl={null}
                                position="relative"
                                pr={null}
                                px={4}
                                rounded="md"
                                transition="all 0.2s"
                                type="text"
                                value="08:00"
                                width="100%"
                              >
                                <input
                                  aria-invalid={false}
                                  className="css-1ga4kqw"
                                  htmlFor="00000000-0000-0000-0000-000000000000"
                                  id="00000000-0000-0000-0000-000000000000"
                                  onChange={[Function]}
                                  type="text"
                                  value="08:00"
                                />
                              </PseudoBox>
                            </Input>
                            <InputRightElement
                              color="gray.400"
                              key=".1"
                              mr={5}
                              size="md"
                              userSelect="none"
                            >
                              <InputElement
                                color="gray.400"
                                mr={5}
                                placement="right"
                                size="md"
                                userSelect="none"
                              >
                                <Box
                                  alignItems="center"
                                  color="gray.400"
                                  display="flex"
                                  fontSize="md"
                                  height={10}
                                  justifyContent="center"
                                  mr={5}
                                  position="absolute"
                                  right="0"
                                  top="0"
                                  userSelect="none"
                                  width={10}
                                  zIndex={2}
                                >
                                  <div
                                    className="css-18bw7fv"
                                  >
                                    HH:mm
                                  </div>
                                </Box>
                              </InputElement>
                            </InputRightElement>
                          </div>
                        </Box>
                      </InputGroup>
                    </div>
                  </Box>
                </FormControl>
              </TimePicker>
              <TimePicker
                label="End time"
                onChange={[Function]}
                value={57600}
              >
                <FormControl
                  isInvalid={false}
                >
                  <Box
                    role="group"
                  >
                    <div
                      className="css-0"
                      role="group"
                    >
                      <FormLabel
                        htmlFor="00000000-0000-0000-0000-000000000000"
                      >
                        <Box
                          as="label"
                          display="inline-block"
                          fontSize="md"
                          fontWeight="medium"
                          htmlFor="00000000-0000-0000-0000-000000000000"
                          opacity="1"
                          pb="4px"
                          pr="12px"
                          textAlign="left"
                          verticalAlign="middle"
                        >
                          <label
                            className="css-176s5fq"
                            htmlFor="00000000-0000-0000-0000-000000000000"
                          >
                            End time
                          </label>
                        </Box>
                      </FormLabel>
                      <InputGroup>
                        <Box
                          display="flex"
                          position="relative"
                        >
                          <div
                            className="css-kjafn5"
                          >
                            <Input
                              as="input"
                              errorBorderColor="red.500"
                              focusBorderColor="blue.500"
                              htmlFor="00000000-0000-0000-0000-000000000000"
                              id="00000000-0000-0000-0000-000000000000"
                              isFullWidth={true}
                              isInvalid={false}
                              isValid={true}
                              key=".0"
                              onChange={[Function]}
                              pl={null}
                              pr={null}
                              size="md"
                              type="text"
                              value="16:00"
                              variant="outline"
                            >
                              <PseudoBox
                                _disabled={
                                  Object {
                                    "cursor": "not-allowed",
                                    "opacity": "0.4",
                                  }
                                }
                                _focus={
                                  Object {
                                    "borderColor": "#3182ce",
                                    "boxShadow": "0 0 0 1px #3182ce",
                                    "zIndex": 1,
                                  }
                                }
                                _hover={
                                  Object {
                                    "borderColor": "gray.300",
                                  }
                                }
                                _invalid={
                                  Object {
                                    "borderColor": "#e53e3e",
                                    "boxShadow": "0 0 0 1px #e53e3e",
                                  }
                                }
                                _readOnly={
                                  Object {
                                    "bg": "transparent",
                                    "boxShadow": "none !important",
                                    "userSelect": "all",
                                  }
                                }
                                alignItems="center"
                                appearance="none"
                                aria-invalid={false}
                                as="input"
                                bg="white"
                                border="1px"
                                borderColor="inherit"
                                display="flex"
                                fontSize="md"
                                height={10}
                                htmlFor="00000000-0000-0000-0000-000000000000"
                                id="00000000-0000-0000-0000-000000000000"
                                isValid={true}
                                onChange={[Function]}
                                outline="none"
                                pl={null}
                                position="relative"
                                pr={null}
                                px={4}
                                rounded="md"
                                transition="all 0.2s"
                                type="text"
                                value="16:00"
                                width="100%"
                              >
                                <input
                                  aria-invalid={false}
                                  className="css-1ga4kqw"
                                  htmlFor="00000000-0000-0000-0000-000000000000"
                                  id="00000000-0000-0000-0000-000000000000"
                                  onChange={[Function]}
                                  type="text"
                                  value="16:00"
                                />
                              </PseudoBox>
                            </Input>
                            <InputRightElement
                              color="gray.400"
                              key=".1"
                              mr={5}
                              size="md"
                              userSelect="none"
                            >
                              <InputElement
                                color="gray.400"
                                mr={5}
                                placement="right"
                                size="md"
                                userSelect="none"
                              >
                                <Box
                                  alignItems="center"
                                  color="gray.400"
                                  display="flex"
                                  fontSize="md"
                                  height={10}
                                  justifyContent="center"
                                  mr={5}
                                  position="absolute"
                                  right="0"
                                  top="0"
                                  userSelect="none"
                                  width={10}
                                  zIndex={2}
                                >
                                  <div
                                    className="css-18bw7fv"
                                  >
                                    HH:mm
                                  </div>
                                </Box>
                              </InputElement>
                            </InputRightElement>
                          </div>
                        </Box>
                      </InputGroup>
                    </div>
                  </Box>
                </FormControl>
              </TimePicker>
              <Checkbox
                checked={false}
                disabled={false}
                label="Times are exact"
                onChange={[Function]}
              >
                <div
                  className="checkbox"
                >
                  <label
                    htmlFor="times-are-exact-input-8"
                  >
                    <input
                      checked={false}
                      disabled={false}
                      id="times-are-exact-input-8"
                      label="Times are exact"
                      onChange={[Function]}
                      type="checkbox"
                    />
                     
                    Times are exact
                  </label>
                </div>
              </Checkbox>
              <Phase
                availableTimetables={Array []}
                disabled={false}
                modificationStops={Array []}
                phaseAtStop=""
                phaseFromStop=""
                phaseFromTimetable=""
                phaseSeconds={300}
                timetableHeadway={900}
                update={[MockFunction]}
              >
                <H5>
                  <Heading
                    as="h5"
                    fontSize="14px"
                    fontWeight="500"
                    my="10px"
                  >
                    <Box
                      as="h5"
                      fontFamily="heading"
                      fontSize="14px"
                      fontWeight="500"
                      lineHeight="shorter"
                      my="10px"
                    >
                      <h5
                        className="css-1rbv6ep"
                      >
                        <span>
                          Phasing 
                        </span>
                        <a
                          href="http://docs.analysis.conveyal.com/en/latest/edit-scenario/phasing.html"
                          rel="noopener noreferrer"
                          target="_blank"
                          title="Learn more about phasing"
                        >
                          <Icon
                            icon={
                              Object {
                                "icon": Array [],
                                "iconName": "info-circle",
                                "prefix": "fas",
                              }
                            }
                          >
                            <FontAwesomeIcon
                              border={false}
                              className=""
                              fixedWidth={true}
                              flip={null}
                              icon={
                                Object {
                                  "icon": Array [],
                                  "iconName": "info-circle",
                                  "prefix": "fas",
                                }
                              }
                              inverse={false}
                              listItem={false}
                              mask={null}
                              pull={null}
                              pulse={false}
                              rotation={null}
                              size={null}
                              spin={false}
                              swapOpacity={false}
                              symbol={false}
                              title=""
                              transform={null}
                            >
                              <svg
                                aria-hidden="true"
                                className="svg-inline--fa fa-info-circle fa-w-NaN fa-fw "
                                data-icon="info-circle"
                                data-prefix="fas"
                                focusable="false"
                                role="img"
                                style={Object {}}
                                viewBox="0 0 undefined undefined"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <path
                                  fill="currentColor"
                                  style={Object {}}
                                />
                              </svg>
                            </FontAwesomeIcon>
                          </Icon>
                        </a>
                      </h5>
                    </Box>
                  </Heading>
                </H5>
                <Group
                  id="phaseAtStop"
                  label="Phase at stop"
                >
                  <div
                    className="form-group"
                  >
                    <label
                      className="control-label"
                      htmlFor="phaseAtStop"
                    >
                      Phase at stop
                    </label>
                    <ForwardRef
                      getOptionLabel={[Function]}
                      getOptionValue={[Function]}
                      inputId="phaseAtStop"
                      isClearable={true}
                      isDisabled={false}
                      name="Phase at stop"
                      onChange={[Function]}
                      options={Array []}
                      placeholder="Phase at stop"
                    >
                      <ReactSelect
                        getOptionLabel={[Function]}
                        getOptionValue={[Function]}
                        innerRef={null}
                        inputId="phaseAtStop"
                        isClearable={true}
                        isDisabled={false}
                        name="Phase at stop"
                        onChange={[Function]}
                        options={Array []}
                        placeholder="Phase at stop"
                        styles={
                          Object {
                            "control": [Function],
                            "option": [Function],
                          }
                        }
                      >
                        <div
                          className="ReactSelectMock"
                        />
                      </ReactSelect>
                    </ForwardRef>
                  </div>
                </Group>
              </Phase>
            </TimetableEntry>
            <SegmentSpeeds
              dwellTime={10}
              dwellTimes={
                Array [
                  12,
                ]
              }
              highlightSegment={[Function]}
              highlightStop={[Function]}
              numberOfStops={0}
              qualifiedStops={Array []}
              segmentDistances={Array []}
              segmentSpeeds={Array []}
              update={[MockFunction]}
            >
              <h4
                style={
                  Object {
                    "display": "flex",
                    "justifyContent": "space-between",
                  }
                }
              >
                <span>
                  Travel time 
                </span>
                <strong>
                  00:00:00
                </strong>
              </h4>
              <P>
                <Box
                  as="p"
                  mb="10px"
                >
                  <p
                    className="css-1r2f04i"
                  >
                    <em>
                      Dwell time at added stops + moving time along added segments
                    </em>
                  </p>
                </Box>
              </P>
              <MinutesSeconds
                id="dwellTime"
                label="Default dwell time"
                onChange={[Function]}
                seconds={10}
              >
                <Group
                  className=""
                  id="dwellTime"
                  label="Default dwell time"
                >
                  <div
                    className="form-group"
                  >
                    <label
                      className="control-label"
                      htmlFor="dwellTime"
                    >
                      Default dwell time
                    </label>
                    <ForwardRef
                      htmlFor="00000000-0000-0000-0000-000000000000"
                      id="dwellTime"
                      isInvalid={false}
                      isValid={true}
                      onChange={[Function]}
                      type="text"
                      units="hh:mm:ss"
                      value="00:00:10"
                    >
                      <div
                        className="InputWithUnits"
                      >
                        <input
                          className="form-control"
                          htmlFor="00000000-0000-0000-0000-000000000000"
                          id="dwellTime"
                          isInvalid={false}
                          isValid={true}
                          onChange={[Function]}
                          type="text"
                          units="hh:mm:ss"
                          value="00:00:10"
                        />
                        <span
                          className="InputUnits"
                        >
                          hh:mm:ss
                        </span>
                      </div>
                    </ForwardRef>
                  </div>
                </Group>
              </MinutesSeconds>
              <P>
                <Box
                  as="p"
                  mb="10px"
                >
                  <p
                    className="css-1r2f04i"
                  >
                    The default time table dwell time will be used for each stop that does not have a custom one set.
                  </p>
                </Box>
              </P>
              <Collapsible
                title="Set individual stop dwell times"
              >
                <a
                  className="CollapsibleButton"
                  onClick={[Function]}
                  role="button"
                  tabIndex={0}
                >
                  <Icon
                    icon={
                      Object {
                        "icon": Array [],
                        "iconName": "caret-right",
                        "prefix": "fas",
                      }
                    }
                  >
                    <FontAwesomeIcon
                      border={false}
                      className=""
                      fixedWidth={true}
                      flip={null}
                      icon={
                        Object {
                          "icon": Array [],
                          "iconName": "caret-right",
                          "prefix": "fas",
                        }
                      }
                      inverse={false}
                      listItem={false}
                      mask={null}
                      pull={null}
                      pulse={false}
                      rotation={null}
                      size={null}
                      spin={false}
                      swapOpacity={false}
                      symbol={false}
                      title=""
                      transform={null}
                    >
                      <svg
                        aria-hidden="true"
                        className="svg-inline--fa fa-caret-right fa-w-NaN fa-fw "
                        data-icon="caret-right"
                        data-prefix="fas"
                        focusable="false"
                        role="img"
                        style={Object {}}
                        viewBox="0 0 undefined undefined"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          fill="currentColor"
                          style={Object {}}
                        />
                      </svg>
                    </FontAwesomeIcon>
                  </Icon>
                  Set individual stop dwell times
                </a>
              </Collapsible>
              <NumberInput
                label="Average speed (along added segments)"
                min={1}
                onChange={[Function]}
                units="km/h"
                value={15}
              >
                <Group
                  id="average-speed-along-added-segments-input-9"
                  label="Average speed (along added segments)"
                  min={1}
                  onChange={[Function]}
                  units="km/h"
                  value={15}
                >
                  <div
                    className="form-group"
                  >
                    <label
                      className="control-label"
                      htmlFor="average-speed-along-added-segments-input-9"
                    >
                      Average speed (along added segments)
                    </label>
                    <ForwardRef
                      id="average-speed-along-added-segments-input-9"
                      label="Average speed (along added segments)"
                      min={1}
                      onChange={[Function]}
                      onWheel={[Function]}
                      type="text"
                      units="km/h"
                      value={15}
                    >
                      <div
                        className="InputWithUnits"
                      >
                        <input
                          className="form-control"
                          id="average-speed-along-added-segments-input-9"
                          label="Average speed (along added segments)"
                          min={1}
                          onChange={[Function]}
                          onWheel={[Function]}
                          placeholder="Average speed (along added segments)"
                          type="text"
                          units="km/h"
                          value={15}
                        />
                        <span
                          className="InputUnits"
                        >
                          km/h
                        </span>
                      </div>
                    </ForwardRef>
                  </div>
                </Group>
              </NumberInput>
              <MinutesSeconds
                id="totalMovingTime"
                label="Total moving time (along added segments)"
                onChange={[Function]}
                seconds={0}
              >
                <Group
                  className="has-error"
                  id="totalMovingTime"
                  label="Total moving time (along added segments)"
                >
                  <div
                    className="form-group has-error"
                  >
                    <label
                      className="control-label"
                      htmlFor="totalMovingTime"
                    >
                      Total moving time (along added segments)
                    </label>
                    <ForwardRef
                      htmlFor="00000000-0000-0000-0000-000000000000"
                      id="totalMovingTime"
                      isInvalid={true}
                      isValid={false}
                      onChange={[Function]}
                      type="text"
                      units="hh:mm:ss"
                      value="00:00:00"
                    >
                      <div
                        className="InputWithUnits"
                      >
                        <input
                          className="form-control"
                          htmlFor="00000000-0000-0000-0000-000000000000"
                          id="totalMovingTime"
                          isInvalid={true}
                          isValid={false}
                          onChange={[Function]}
                          type="text"
                          units="hh:mm:ss"
                          value="00:00:00"
                        />
                        <span
                          className="InputUnits"
                        >
                          hh:mm:ss
                        </span>
                      </div>
                    </ForwardRef>
                  </div>
                </Group>
              </MinutesSeconds>
              <Collapsible
                title="Set individual segment speeds"
              >
                <a
                  className="CollapsibleButton"
                  onClick={[Function]}
                  role="button"
                  tabIndex={0}
                >
                  <Icon
                    icon={
                      Object {
                        "icon": Array [],
                        "iconName": "caret-right",
                        "prefix": "fas",
                      }
                    }
                  >
                    <FontAwesomeIcon
                      border={false}
                      className=""
                      fixedWidth={true}
                      flip={null}
                      icon={
                        Object {
                          "icon": Array [],
                          "iconName": "caret-right",
                          "prefix": "fas",
                        }
                      }
                      inverse={false}
                      listItem={false}
                      mask={null}
                      pull={null}
                      pulse={false}
                      rotation={null}
                      size={null}
                      spin={false}
                      swapOpacity={false}
                      symbol={false}
                      title=""
                      transform={null}
                    >
                      <svg
                        aria-hidden="true"
                        className="svg-inline--fa fa-caret-right fa-w-NaN fa-fw "
                        data-icon="caret-right"
                        data-prefix="fas"
                        focusable="false"
                        role="img"
                        style={Object {}}
                        viewBox="0 0 undefined undefined"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          fill="currentColor"
                          style={Object {}}
                        />
                      </svg>
                    </FontAwesomeIcon>
                  </Icon>
                  Set individual segment speeds
                </a>
              </Collapsible>
            </SegmentSpeeds>
            <Button
              block={true}
              onClick={[Function]}
              style="danger"
              title="Delete timetable"
            >
              <a
                className="btn btn-danger btn-block"
                href="#"
                onClick={[Function]}
                tabIndex={0}
                title="Delete timetable"
              >
                <Icon
                  icon={
                    Object {
                      "icon": Array [],
                      "iconName": "times",
                      "prefix": "fas",
                    }
                  }
                >
                  <FontAwesomeIcon
                    border={false}
                    className=""
                    fixedWidth={true}
                    flip={null}
                    icon={
                      Object {
                        "icon": Array [],
                        "iconName": "times",
                        "prefix": "fas",
                      }
                    }
                    inverse={false}
                    listItem={false}
                    mask={null}
                    pull={null}
                    pulse={false}
                    rotation={null}
                    size={null}
                    spin={false}
                    swapOpacity={false}
                    symbol={false}
                    title=""
                    transform={null}
                  >
                    <svg
                      aria-hidden="true"
                      className="svg-inline--fa fa-times fa-w-NaN fa-fw "
                      data-icon="times"
                      data-prefix="fas"
                      focusable="false"
                      role="img"
                      style={Object {}}
                      viewBox="0 0 undefined undefined"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        fill="currentColor"
                        style={Object {}}
                      />
                    </svg>
                  </FontAwesomeIcon>
                </Icon>
                 Delete Timetable
              </a>
            </Button>
          </div>
        </Body>
      </div>
    </Panel>
  </Collapsible>
</TimetableComponent>
`;
