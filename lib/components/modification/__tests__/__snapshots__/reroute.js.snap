// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Component RerouteComponent snapshot(mount) 1`] = `
<RerouteComponent
  allStops={Array []}
  feeds={
    Array [
      Object {
        "checksum": "MOCK",
        "id": "1",
        "routes": Array [
          Object {
            "label": "mock-route-label",
            "patterns": Array [
              Object {
                "geometry": Object {
                  "coordinates": Array [
                    Array [
                      -122.0246,
                      36.9707,
                    ],
                    Array [
                      -122.0279,
                      37.049,
                    ],
                    Array [
                      -121.9799,
                      37.2299,
                    ],
                    Array [
                      -121.9445,
                      37.324,
                    ],
                    Array [
                      -121.936,
                      37.353,
                    ],
                    Array [
                      -121.924,
                      37.365,
                    ],
                  ],
                  "type": "LineString",
                },
                "name": "Mock Pattern",
                "pattern_id": "mock-pattern-id",
                "stops": Array [
                  Object {
                    "stop_id": "1",
                    "stop_lat": 36.9707,
                    "stop_lon": -122.0246,
                    "stop_name": "Santa Cruz",
                  },
                  Object {
                    "stop_id": "2",
                    "stop_lat": 37.049,
                    "stop_lon": -122.0279,
                    "stop_name": "Scotts Valley",
                  },
                ],
                "trips": Array [
                  Object {
                    "duration": 1234,
                    "end_time": 13579,
                    "start_time": 12345,
                    "trip_headsign": "To Downtown",
                    "trip_id": "abcd",
                    "trip_short_name": "The Express",
                  },
                ],
              },
            ],
            "route_id": "route1",
          },
        ],
        "stops": Array [
          Object {
            "stop_id": "1",
            "stop_lat": 36.9707,
            "stop_lon": -122.0246,
            "stop_name": "Santa Cruz",
          },
          Object {
            "stop_id": "2",
            "stop_lat": 37.049,
            "stop_lon": -122.0279,
            "stop_name": "Scotts Valley",
          },
        ],
        "stopsById": Object {
          "1": Object {
            "stop_id": "1",
            "stop_lat": 36.9707,
            "stop_lon": -122.0246,
            "stop_name": "Santa Cruz",
          },
          "2": Object {
            "stop_id": "2",
            "stop_lat": 37.049,
            "stop_lon": -122.0279,
            "stop_name": "Scotts Valley",
          },
        },
      },
    ]
  }
  mapState={
    Object {
      "state": "reroute",
    }
  }
  modification={
    Object {
      "_id": "1234",
      "accessGroup": "accessGroupName",
      "bidirectional": false,
      "createdAt": "2017-11-08T12:30:50.133Z",
      "createdBy": "person@gmail.com",
      "description": "Mock description",
      "dwellTime": 0,
      "entries": Array [],
      "feed": "1",
      "fromStop": "1",
      "name": "Test Modification",
      "nonce": "12345",
      "projectId": "1",
      "routes": Array [
        "route1",
      ],
      "segmentSpeeds": Array [],
      "segments": Array [],
      "timetables": Array [
        Object {
          "_id": "timetable-id",
          "dwellTime": 10,
          "dwellTimes": Array [
            12,
          ],
          "endTime": 57600,
          "exactTimes": false,
          "friday": true,
          "headwaySecs": 900,
          "modificationId": "1234",
          "modificationName": "Test Modification",
          "monday": true,
          "name": "Test timetable",
          "patternTrips": Array [
            "abcd",
          ],
          "phaseAtStop": "",
          "phaseFromStop": "",
          "phaseFromTimetable": "",
          "phaseSeconds": 300,
          "saturday": false,
          "segmentSpeeds": Array [],
          "sourceTrip": "abcd",
          "startTime": 28800,
          "sunday": false,
          "thursday": true,
          "tuesday": true,
          "wednesday": true,
        },
      ],
      "toStop": "2",
      "trips": Array [
        "abcd",
      ],
      "type": "reroute",
      "updatedAt": "2017-11-08T12:31:19.602Z",
      "updatedBy": "person@gmail.com",
      "variants": Array [
        true,
      ],
    }
  }
  qualifiedStops={Array []}
  routePatterns={Array []}
  segmentDistances={Array []}
  selectedFeed={
    Object {
      "checksum": "MOCK",
      "id": "1",
      "routes": Array [
        Object {
          "label": "mock-route-label",
          "patterns": Array [
            Object {
              "geometry": Object {
                "coordinates": Array [
                  Array [
                    -122.0246,
                    36.9707,
                  ],
                  Array [
                    -122.0279,
                    37.049,
                  ],
                  Array [
                    -121.9799,
                    37.2299,
                  ],
                  Array [
                    -121.9445,
                    37.324,
                  ],
                  Array [
                    -121.936,
                    37.353,
                  ],
                  Array [
                    -121.924,
                    37.365,
                  ],
                ],
                "type": "LineString",
              },
              "name": "Mock Pattern",
              "pattern_id": "mock-pattern-id",
              "stops": Array [
                Object {
                  "stop_id": "1",
                  "stop_lat": 36.9707,
                  "stop_lon": -122.0246,
                  "stop_name": "Santa Cruz",
                },
                Object {
                  "stop_id": "2",
                  "stop_lat": 37.049,
                  "stop_lon": -122.0279,
                  "stop_name": "Scotts Valley",
                },
              ],
              "trips": Array [
                Object {
                  "duration": 1234,
                  "end_time": 13579,
                  "start_time": 12345,
                  "trip_headsign": "To Downtown",
                  "trip_id": "abcd",
                  "trip_short_name": "The Express",
                },
              ],
            },
          ],
          "route_id": "route1",
        },
      ],
      "stops": Array [
        Object {
          "stop_id": "1",
          "stop_lat": 36.9707,
          "stop_lon": -122.0246,
          "stop_name": "Santa Cruz",
        },
        Object {
          "stop_id": "2",
          "stop_lat": 37.049,
          "stop_lon": -122.0279,
          "stop_name": "Scotts Valley",
        },
      ],
      "stopsById": Object {
        "1": Object {
          "stop_id": "1",
          "stop_lat": 36.9707,
          "stop_lon": -122.0246,
          "stop_name": "Santa Cruz",
        },
        "2": Object {
          "stop_id": "2",
          "stop_lat": 37.049,
          "stop_lon": -122.0279,
          "stop_name": "Scotts Valley",
        },
      },
    }
  }
  setMapState={[MockFunction]}
  stops={Array []}
  update={[MockFunction]}
  updateAndRetrieveFeedData={[MockFunction]}
>
  <Memo(RerouteLayer)
    feed={
      Object {
        "checksum": "MOCK",
        "id": "1",
        "routes": Array [
          Object {
            "label": "mock-route-label",
            "patterns": Array [
              Object {
                "geometry": Object {
                  "coordinates": Array [
                    Array [
                      -122.0246,
                      36.9707,
                    ],
                    Array [
                      -122.0279,
                      37.049,
                    ],
                    Array [
                      -121.9799,
                      37.2299,
                    ],
                    Array [
                      -121.9445,
                      37.324,
                    ],
                    Array [
                      -121.936,
                      37.353,
                    ],
                    Array [
                      -121.924,
                      37.365,
                    ],
                  ],
                  "type": "LineString",
                },
                "name": "Mock Pattern",
                "pattern_id": "mock-pattern-id",
                "stops": Array [
                  Object {
                    "stop_id": "1",
                    "stop_lat": 36.9707,
                    "stop_lon": -122.0246,
                    "stop_name": "Santa Cruz",
                  },
                  Object {
                    "stop_id": "2",
                    "stop_lat": 37.049,
                    "stop_lon": -122.0279,
                    "stop_name": "Scotts Valley",
                  },
                ],
                "trips": Array [
                  Object {
                    "duration": 1234,
                    "end_time": 13579,
                    "start_time": 12345,
                    "trip_headsign": "To Downtown",
                    "trip_id": "abcd",
                    "trip_short_name": "The Express",
                  },
                ],
              },
            ],
            "route_id": "route1",
          },
        ],
        "stops": Array [
          Object {
            "stop_id": "1",
            "stop_lat": 36.9707,
            "stop_lon": -122.0246,
            "stop_name": "Santa Cruz",
          },
          Object {
            "stop_id": "2",
            "stop_lat": 37.049,
            "stop_lon": -122.0279,
            "stop_name": "Scotts Valley",
          },
        ],
        "stopsById": Object {
          "1": Object {
            "stop_id": "1",
            "stop_lat": 36.9707,
            "stop_lon": -122.0246,
            "stop_name": "Santa Cruz",
          },
          "2": Object {
            "stop_id": "2",
            "stop_lat": 37.049,
            "stop_lon": -122.0279,
            "stop_name": "Scotts Valley",
          },
        },
      }
    }
    modification={
      Object {
        "_id": "1234",
        "accessGroup": "accessGroupName",
        "bidirectional": false,
        "createdAt": "2017-11-08T12:30:50.133Z",
        "createdBy": "person@gmail.com",
        "description": "Mock description",
        "dwellTime": 0,
        "entries": Array [],
        "feed": "1",
        "fromStop": "1",
        "name": "Test Modification",
        "nonce": "12345",
        "projectId": "1",
        "routes": Array [
          "route1",
        ],
        "segmentSpeeds": Array [],
        "segments": Array [],
        "timetables": Array [
          Object {
            "_id": "timetable-id",
            "dwellTime": 10,
            "dwellTimes": Array [
              12,
            ],
            "endTime": 57600,
            "exactTimes": false,
            "friday": true,
            "headwaySecs": 900,
            "modificationId": "1234",
            "modificationName": "Test Modification",
            "monday": true,
            "name": "Test timetable",
            "patternTrips": Array [
              "abcd",
            ],
            "phaseAtStop": "",
            "phaseFromStop": "",
            "phaseFromTimetable": "",
            "phaseSeconds": 300,
            "saturday": false,
            "segmentSpeeds": Array [],
            "sourceTrip": "abcd",
            "startTime": 28800,
            "sunday": false,
            "thursday": true,
            "tuesday": true,
            "wednesday": true,
          },
        ],
        "toStop": "2",
        "trips": Array [
          "abcd",
        ],
        "type": "reroute",
        "updatedAt": "2017-11-08T12:31:19.602Z",
        "updatedBy": "person@gmail.com",
        "variants": Array [
          true,
        ],
      }
    }
  >
    <DynamicMockedComponent
      color="#777777"
      patterns={
        Array [
          Object {
            "geometry": Object {
              "coordinates": Array [
                Array [
                  -122.0246,
                  36.9707,
                ],
                Array [
                  -122.0279,
                  37.049,
                ],
                Array [
                  -121.9799,
                  37.2299,
                ],
                Array [
                  -121.9445,
                  37.324,
                ],
                Array [
                  -121.936,
                  37.353,
                ],
                Array [
                  -121.924,
                  37.365,
                ],
              ],
              "type": "LineString",
            },
            "name": "Mock Pattern",
            "pattern_id": "mock-pattern-id",
            "stops": Array [
              Object {
                "stop_id": "1",
                "stop_lat": 36.9707,
                "stop_lon": -122.0246,
                "stop_name": "Santa Cruz",
              },
              Object {
                "stop_id": "2",
                "stop_lat": 37.049,
                "stop_lon": -122.0279,
                "stop_name": "Scotts Valley",
              },
            ],
            "trips": Array [
              Object {
                "duration": 1234,
                "end_time": 13579,
                "start_time": 12345,
                "trip_headsign": "To Downtown",
                "trip_id": "abcd",
                "trip_short_name": "The Express",
              },
            ],
          },
        ]
      }
    />
    <DynamicMockedComponent
      color="#777777"
      patterns={
        Array [
          Object {
            "geometry": Object {
              "coordinates": Array [
                Array [
                  -122.0246,
                  36.9707,
                ],
                Array [
                  -122.0279,
                  37.049,
                ],
                Array [
                  -121.9799,
                  37.2299,
                ],
                Array [
                  -121.9445,
                  37.324,
                ],
                Array [
                  -121.936,
                  37.353,
                ],
                Array [
                  -121.924,
                  37.365,
                ],
              ],
              "type": "LineString",
            },
            "name": "Mock Pattern",
            "pattern_id": "mock-pattern-id",
            "stops": Array [
              Object {
                "stop_id": "1",
                "stop_lat": 36.9707,
                "stop_lon": -122.0246,
                "stop_name": "Santa Cruz",
              },
              Object {
                "stop_id": "2",
                "stop_lat": 37.049,
                "stop_lon": -122.0279,
                "stop_name": "Scotts Valley",
              },
            ],
            "trips": Array [
              Object {
                "duration": 1234,
                "end_time": 13579,
                "start_time": 12345,
                "trip_headsign": "To Downtown",
                "trip_id": "abcd",
                "trip_short_name": "The Express",
              },
            ],
          },
        ]
      }
    />
  </Memo(RerouteLayer)>
  <SelectFeedRouteAndPatterns
    onChange={[MockFunction]}
    routes={
      Array [
        "route1",
      ]
    }
    trips={
      Array [
        "abcd",
      ]
    }
  >
    <SelectFeedAndRoutes
      feeds={
        Array [
          Object {
            "checksum": "MOCK",
            "id": "1",
            "name": "1",
            "routes": Array [
              Object {
                "label": "mock-route-label",
                "patterns": Array [
                  Object {
                    "geometry": Object {
                      "coordinates": Array [
                        Array [
                          -122.0246,
                          36.9707,
                        ],
                        Array [
                          -122.0279,
                          37.049,
                        ],
                        Array [
                          -121.9799,
                          37.2299,
                        ],
                        Array [
                          -121.9445,
                          37.324,
                        ],
                        Array [
                          -121.936,
                          37.353,
                        ],
                        Array [
                          -121.924,
                          37.365,
                        ],
                      ],
                      "type": "LineString",
                    },
                    "name": "Mock Pattern",
                    "pattern_id": "mock-pattern-id",
                    "stops": Array [
                      Object {
                        "stop_id": "1",
                        "stop_lat": 36.9707,
                        "stop_lon": -122.0246,
                        "stop_name": "Santa Cruz",
                      },
                      Object {
                        "stop_id": "2",
                        "stop_lat": 37.049,
                        "stop_lon": -122.0279,
                        "stop_name": "Scotts Valley",
                      },
                    ],
                    "trips": Array [
                      Object {
                        "duration": 1234,
                        "end_time": 13579,
                        "start_time": 12345,
                        "trip_headsign": "To Downtown",
                        "trip_id": "abcd",
                        "trip_short_name": "The Express",
                      },
                    ],
                  },
                ],
                "route_id": "route1",
              },
            ],
            "stops": Array [
              Object {
                "stop_id": "1",
                "stop_lat": 36.9707,
                "stop_lon": -122.0246,
                "stop_name": "Santa Cruz",
              },
              Object {
                "stop_id": "2",
                "stop_lat": 37.049,
                "stop_lon": -122.0279,
                "stop_name": "Scotts Valley",
              },
            ],
            "stopsById": Object {
              "1": Object {
                "stop_id": "1",
                "stop_lat": 36.9707,
                "stop_lon": -122.0246,
                "stop_name": "Santa Cruz",
              },
              "2": Object {
                "stop_id": "2",
                "stop_lat": 37.049,
                "stop_lon": -122.0279,
                "stop_name": "Scotts Valley",
              },
            },
          },
        ]
      }
      onChange={[Function]}
      selectedFeed={
        Object {
          "checksum": "MOCK",
          "id": "1",
          "name": "1",
          "routes": Array [
            Object {
              "label": "mock-route-label",
              "patterns": Array [
                Object {
                  "geometry": Object {
                    "coordinates": Array [
                      Array [
                        -122.0246,
                        36.9707,
                      ],
                      Array [
                        -122.0279,
                        37.049,
                      ],
                      Array [
                        -121.9799,
                        37.2299,
                      ],
                      Array [
                        -121.9445,
                        37.324,
                      ],
                      Array [
                        -121.936,
                        37.353,
                      ],
                      Array [
                        -121.924,
                        37.365,
                      ],
                    ],
                    "type": "LineString",
                  },
                  "name": "Mock Pattern",
                  "pattern_id": "mock-pattern-id",
                  "stops": Array [
                    Object {
                      "stop_id": "1",
                      "stop_lat": 36.9707,
                      "stop_lon": -122.0246,
                      "stop_name": "Santa Cruz",
                    },
                    Object {
                      "stop_id": "2",
                      "stop_lat": 37.049,
                      "stop_lon": -122.0279,
                      "stop_name": "Scotts Valley",
                    },
                  ],
                  "trips": Array [
                    Object {
                      "duration": 1234,
                      "end_time": 13579,
                      "start_time": 12345,
                      "trip_headsign": "To Downtown",
                      "trip_id": "abcd",
                      "trip_short_name": "The Express",
                    },
                  ],
                },
              ],
              "route_id": "route1",
            },
          ],
          "stops": Array [
            Object {
              "stop_id": "1",
              "stop_lat": 36.9707,
              "stop_lon": -122.0246,
              "stop_name": "Santa Cruz",
            },
            Object {
              "stop_id": "2",
              "stop_lat": 37.049,
              "stop_lon": -122.0279,
              "stop_name": "Scotts Valley",
            },
          ],
          "stopsById": Object {
            "1": Object {
              "stop_id": "1",
              "stop_lat": 36.9707,
              "stop_lon": -122.0246,
              "stop_name": "Santa Cruz",
            },
            "2": Object {
              "stop_id": "2",
              "stop_lat": 37.049,
              "stop_lon": -122.0279,
              "stop_name": "Scotts Valley",
            },
          },
        }
      }
      selectedRouteIds={
        Array [
          "route1",
        ]
      }
    >
      <Group>
        <div
          className="form-group"
        >
          <label
            htmlFor="Feed"
          >
            Select feed
          </label>
          <ForwardRef
            getOptionLabel={[Function]}
            getOptionValue={[Function]}
            inputId="Feed"
            name="Feed"
            onChange={[Function]}
            options={
              Array [
                Object {
                  "checksum": "MOCK",
                  "id": "1",
                  "name": "1",
                  "routes": Array [
                    Object {
                      "label": "mock-route-label",
                      "patterns": Array [
                        Object {
                          "geometry": Object {
                            "coordinates": Array [
                              Array [
                                -122.0246,
                                36.9707,
                              ],
                              Array [
                                -122.0279,
                                37.049,
                              ],
                              Array [
                                -121.9799,
                                37.2299,
                              ],
                              Array [
                                -121.9445,
                                37.324,
                              ],
                              Array [
                                -121.936,
                                37.353,
                              ],
                              Array [
                                -121.924,
                                37.365,
                              ],
                            ],
                            "type": "LineString",
                          },
                          "name": "Mock Pattern",
                          "pattern_id": "mock-pattern-id",
                          "stops": Array [
                            Object {
                              "stop_id": "1",
                              "stop_lat": 36.9707,
                              "stop_lon": -122.0246,
                              "stop_name": "Santa Cruz",
                            },
                            Object {
                              "stop_id": "2",
                              "stop_lat": 37.049,
                              "stop_lon": -122.0279,
                              "stop_name": "Scotts Valley",
                            },
                          ],
                          "trips": Array [
                            Object {
                              "duration": 1234,
                              "end_time": 13579,
                              "start_time": 12345,
                              "trip_headsign": "To Downtown",
                              "trip_id": "abcd",
                              "trip_short_name": "The Express",
                            },
                          ],
                        },
                      ],
                      "route_id": "route1",
                    },
                  ],
                  "stops": Array [
                    Object {
                      "stop_id": "1",
                      "stop_lat": 36.9707,
                      "stop_lon": -122.0246,
                      "stop_name": "Santa Cruz",
                    },
                    Object {
                      "stop_id": "2",
                      "stop_lat": 37.049,
                      "stop_lon": -122.0279,
                      "stop_name": "Scotts Valley",
                    },
                  ],
                  "stopsById": Object {
                    "1": Object {
                      "stop_id": "1",
                      "stop_lat": 36.9707,
                      "stop_lon": -122.0246,
                      "stop_name": "Santa Cruz",
                    },
                    "2": Object {
                      "stop_id": "2",
                      "stop_lat": 37.049,
                      "stop_lon": -122.0279,
                      "stop_name": "Scotts Valley",
                    },
                  },
                },
              ]
            }
            placeholder="Select feed"
            value={
              Object {
                "checksum": "MOCK",
                "id": "1",
                "name": "1",
                "routes": Array [
                  Object {
                    "label": "mock-route-label",
                    "patterns": Array [
                      Object {
                        "geometry": Object {
                          "coordinates": Array [
                            Array [
                              -122.0246,
                              36.9707,
                            ],
                            Array [
                              -122.0279,
                              37.049,
                            ],
                            Array [
                              -121.9799,
                              37.2299,
                            ],
                            Array [
                              -121.9445,
                              37.324,
                            ],
                            Array [
                              -121.936,
                              37.353,
                            ],
                            Array [
                              -121.924,
                              37.365,
                            ],
                          ],
                          "type": "LineString",
                        },
                        "name": "Mock Pattern",
                        "pattern_id": "mock-pattern-id",
                        "stops": Array [
                          Object {
                            "stop_id": "1",
                            "stop_lat": 36.9707,
                            "stop_lon": -122.0246,
                            "stop_name": "Santa Cruz",
                          },
                          Object {
                            "stop_id": "2",
                            "stop_lat": 37.049,
                            "stop_lon": -122.0279,
                            "stop_name": "Scotts Valley",
                          },
                        ],
                        "trips": Array [
                          Object {
                            "duration": 1234,
                            "end_time": 13579,
                            "start_time": 12345,
                            "trip_headsign": "To Downtown",
                            "trip_id": "abcd",
                            "trip_short_name": "The Express",
                          },
                        ],
                      },
                    ],
                    "route_id": "route1",
                  },
                ],
                "stops": Array [
                  Object {
                    "stop_id": "1",
                    "stop_lat": 36.9707,
                    "stop_lon": -122.0246,
                    "stop_name": "Santa Cruz",
                  },
                  Object {
                    "stop_id": "2",
                    "stop_lat": 37.049,
                    "stop_lon": -122.0279,
                    "stop_name": "Scotts Valley",
                  },
                ],
                "stopsById": Object {
                  "1": Object {
                    "stop_id": "1",
                    "stop_lat": 36.9707,
                    "stop_lon": -122.0246,
                    "stop_name": "Santa Cruz",
                  },
                  "2": Object {
                    "stop_id": "2",
                    "stop_lat": 37.049,
                    "stop_lon": -122.0279,
                    "stop_name": "Scotts Valley",
                  },
                },
              }
            }
          >
            <ReactSelect
              getOptionLabel={[Function]}
              getOptionValue={[Function]}
              innerRef={null}
              inputId="Feed"
              name="Feed"
              onChange={[Function]}
              options={
                Array [
                  Object {
                    "checksum": "MOCK",
                    "id": "1",
                    "name": "1",
                    "routes": Array [
                      Object {
                        "label": "mock-route-label",
                        "patterns": Array [
                          Object {
                            "geometry": Object {
                              "coordinates": Array [
                                Array [
                                  -122.0246,
                                  36.9707,
                                ],
                                Array [
                                  -122.0279,
                                  37.049,
                                ],
                                Array [
                                  -121.9799,
                                  37.2299,
                                ],
                                Array [
                                  -121.9445,
                                  37.324,
                                ],
                                Array [
                                  -121.936,
                                  37.353,
                                ],
                                Array [
                                  -121.924,
                                  37.365,
                                ],
                              ],
                              "type": "LineString",
                            },
                            "name": "Mock Pattern",
                            "pattern_id": "mock-pattern-id",
                            "stops": Array [
                              Object {
                                "stop_id": "1",
                                "stop_lat": 36.9707,
                                "stop_lon": -122.0246,
                                "stop_name": "Santa Cruz",
                              },
                              Object {
                                "stop_id": "2",
                                "stop_lat": 37.049,
                                "stop_lon": -122.0279,
                                "stop_name": "Scotts Valley",
                              },
                            ],
                            "trips": Array [
                              Object {
                                "duration": 1234,
                                "end_time": 13579,
                                "start_time": 12345,
                                "trip_headsign": "To Downtown",
                                "trip_id": "abcd",
                                "trip_short_name": "The Express",
                              },
                            ],
                          },
                        ],
                        "route_id": "route1",
                      },
                    ],
                    "stops": Array [
                      Object {
                        "stop_id": "1",
                        "stop_lat": 36.9707,
                        "stop_lon": -122.0246,
                        "stop_name": "Santa Cruz",
                      },
                      Object {
                        "stop_id": "2",
                        "stop_lat": 37.049,
                        "stop_lon": -122.0279,
                        "stop_name": "Scotts Valley",
                      },
                    ],
                    "stopsById": Object {
                      "1": Object {
                        "stop_id": "1",
                        "stop_lat": 36.9707,
                        "stop_lon": -122.0246,
                        "stop_name": "Santa Cruz",
                      },
                      "2": Object {
                        "stop_id": "2",
                        "stop_lat": 37.049,
                        "stop_lon": -122.0279,
                        "stop_name": "Scotts Valley",
                      },
                    },
                  },
                ]
              }
              placeholder="Select feed"
              styles={
                Object {
                  "control": [Function],
                  "option": [Function],
                }
              }
              value={
                Object {
                  "checksum": "MOCK",
                  "id": "1",
                  "name": "1",
                  "routes": Array [
                    Object {
                      "label": "mock-route-label",
                      "patterns": Array [
                        Object {
                          "geometry": Object {
                            "coordinates": Array [
                              Array [
                                -122.0246,
                                36.9707,
                              ],
                              Array [
                                -122.0279,
                                37.049,
                              ],
                              Array [
                                -121.9799,
                                37.2299,
                              ],
                              Array [
                                -121.9445,
                                37.324,
                              ],
                              Array [
                                -121.936,
                                37.353,
                              ],
                              Array [
                                -121.924,
                                37.365,
                              ],
                            ],
                            "type": "LineString",
                          },
                          "name": "Mock Pattern",
                          "pattern_id": "mock-pattern-id",
                          "stops": Array [
                            Object {
                              "stop_id": "1",
                              "stop_lat": 36.9707,
                              "stop_lon": -122.0246,
                              "stop_name": "Santa Cruz",
                            },
                            Object {
                              "stop_id": "2",
                              "stop_lat": 37.049,
                              "stop_lon": -122.0279,
                              "stop_name": "Scotts Valley",
                            },
                          ],
                          "trips": Array [
                            Object {
                              "duration": 1234,
                              "end_time": 13579,
                              "start_time": 12345,
                              "trip_headsign": "To Downtown",
                              "trip_id": "abcd",
                              "trip_short_name": "The Express",
                            },
                          ],
                        },
                      ],
                      "route_id": "route1",
                    },
                  ],
                  "stops": Array [
                    Object {
                      "stop_id": "1",
                      "stop_lat": 36.9707,
                      "stop_lon": -122.0246,
                      "stop_name": "Santa Cruz",
                    },
                    Object {
                      "stop_id": "2",
                      "stop_lat": 37.049,
                      "stop_lon": -122.0279,
                      "stop_name": "Scotts Valley",
                    },
                  ],
                  "stopsById": Object {
                    "1": Object {
                      "stop_id": "1",
                      "stop_lat": 36.9707,
                      "stop_lon": -122.0246,
                      "stop_name": "Santa Cruz",
                    },
                    "2": Object {
                      "stop_id": "2",
                      "stop_lat": 37.049,
                      "stop_lon": -122.0279,
                      "stop_name": "Scotts Valley",
                    },
                  },
                }
              }
            >
              <div
                className="ReactSelectMock"
              />
            </ReactSelect>
          </ForwardRef>
        </div>
      </Group>
      <Group>
        <div
          className="form-group"
        >
          <label
            htmlFor="Route"
          >
            Select route
          </label>
          <ForwardRef
            getOptionLabel={[Function]}
            getOptionValue={[Function]}
            inputId="Route"
            name="Route"
            onChange={[Function]}
            options={
              Array [
                Object {
                  "label": "mock-route-label",
                  "patterns": Array [
                    Object {
                      "geometry": Object {
                        "coordinates": Array [
                          Array [
                            -122.0246,
                            36.9707,
                          ],
                          Array [
                            -122.0279,
                            37.049,
                          ],
                          Array [
                            -121.9799,
                            37.2299,
                          ],
                          Array [
                            -121.9445,
                            37.324,
                          ],
                          Array [
                            -121.936,
                            37.353,
                          ],
                          Array [
                            -121.924,
                            37.365,
                          ],
                        ],
                        "type": "LineString",
                      },
                      "name": "Mock Pattern",
                      "pattern_id": "mock-pattern-id",
                      "stops": Array [
                        Object {
                          "stop_id": "1",
                          "stop_lat": 36.9707,
                          "stop_lon": -122.0246,
                          "stop_name": "Santa Cruz",
                        },
                        Object {
                          "stop_id": "2",
                          "stop_lat": 37.049,
                          "stop_lon": -122.0279,
                          "stop_name": "Scotts Valley",
                        },
                      ],
                      "trips": Array [
                        Object {
                          "duration": 1234,
                          "end_time": 13579,
                          "start_time": 12345,
                          "trip_headsign": "To Downtown",
                          "trip_id": "abcd",
                          "trip_short_name": "The Express",
                        },
                      ],
                    },
                  ],
                  "route_id": "route1",
                },
              ]
            }
            placeholder="Select route"
            value={
              Object {
                "label": "mock-route-label",
                "patterns": Array [
                  Object {
                    "geometry": Object {
                      "coordinates": Array [
                        Array [
                          -122.0246,
                          36.9707,
                        ],
                        Array [
                          -122.0279,
                          37.049,
                        ],
                        Array [
                          -121.9799,
                          37.2299,
                        ],
                        Array [
                          -121.9445,
                          37.324,
                        ],
                        Array [
                          -121.936,
                          37.353,
                        ],
                        Array [
                          -121.924,
                          37.365,
                        ],
                      ],
                      "type": "LineString",
                    },
                    "name": "Mock Pattern",
                    "pattern_id": "mock-pattern-id",
                    "stops": Array [
                      Object {
                        "stop_id": "1",
                        "stop_lat": 36.9707,
                        "stop_lon": -122.0246,
                        "stop_name": "Santa Cruz",
                      },
                      Object {
                        "stop_id": "2",
                        "stop_lat": 37.049,
                        "stop_lon": -122.0279,
                        "stop_name": "Scotts Valley",
                      },
                    ],
                    "trips": Array [
                      Object {
                        "duration": 1234,
                        "end_time": 13579,
                        "start_time": 12345,
                        "trip_headsign": "To Downtown",
                        "trip_id": "abcd",
                        "trip_short_name": "The Express",
                      },
                    ],
                  },
                ],
                "route_id": "route1",
              }
            }
          >
            <ReactSelect
              getOptionLabel={[Function]}
              getOptionValue={[Function]}
              innerRef={null}
              inputId="Route"
              name="Route"
              onChange={[Function]}
              options={
                Array [
                  Object {
                    "label": "mock-route-label",
                    "patterns": Array [
                      Object {
                        "geometry": Object {
                          "coordinates": Array [
                            Array [
                              -122.0246,
                              36.9707,
                            ],
                            Array [
                              -122.0279,
                              37.049,
                            ],
                            Array [
                              -121.9799,
                              37.2299,
                            ],
                            Array [
                              -121.9445,
                              37.324,
                            ],
                            Array [
                              -121.936,
                              37.353,
                            ],
                            Array [
                              -121.924,
                              37.365,
                            ],
                          ],
                          "type": "LineString",
                        },
                        "name": "Mock Pattern",
                        "pattern_id": "mock-pattern-id",
                        "stops": Array [
                          Object {
                            "stop_id": "1",
                            "stop_lat": 36.9707,
                            "stop_lon": -122.0246,
                            "stop_name": "Santa Cruz",
                          },
                          Object {
                            "stop_id": "2",
                            "stop_lat": 37.049,
                            "stop_lon": -122.0279,
                            "stop_name": "Scotts Valley",
                          },
                        ],
                        "trips": Array [
                          Object {
                            "duration": 1234,
                            "end_time": 13579,
                            "start_time": 12345,
                            "trip_headsign": "To Downtown",
                            "trip_id": "abcd",
                            "trip_short_name": "The Express",
                          },
                        ],
                      },
                    ],
                    "route_id": "route1",
                  },
                ]
              }
              placeholder="Select route"
              styles={
                Object {
                  "control": [Function],
                  "option": [Function],
                }
              }
              value={
                Object {
                  "label": "mock-route-label",
                  "patterns": Array [
                    Object {
                      "geometry": Object {
                        "coordinates": Array [
                          Array [
                            -122.0246,
                            36.9707,
                          ],
                          Array [
                            -122.0279,
                            37.049,
                          ],
                          Array [
                            -121.9799,
                            37.2299,
                          ],
                          Array [
                            -121.9445,
                            37.324,
                          ],
                          Array [
                            -121.936,
                            37.353,
                          ],
                          Array [
                            -121.924,
                            37.365,
                          ],
                        ],
                        "type": "LineString",
                      },
                      "name": "Mock Pattern",
                      "pattern_id": "mock-pattern-id",
                      "stops": Array [
                        Object {
                          "stop_id": "1",
                          "stop_lat": 36.9707,
                          "stop_lon": -122.0246,
                          "stop_name": "Santa Cruz",
                        },
                        Object {
                          "stop_id": "2",
                          "stop_lat": 37.049,
                          "stop_lon": -122.0279,
                          "stop_name": "Scotts Valley",
                        },
                      ],
                      "trips": Array [
                        Object {
                          "duration": 1234,
                          "end_time": 13579,
                          "start_time": 12345,
                          "trip_headsign": "To Downtown",
                          "trip_id": "abcd",
                          "trip_short_name": "The Express",
                        },
                      ],
                    },
                  ],
                  "route_id": "route1",
                }
              }
            >
              <div
                className="ReactSelectMock"
              />
            </ReactSelect>
          </ForwardRef>
        </div>
      </Group>
    </SelectFeedAndRoutes>
    <SelectPatterns
      onChange={[Function]}
      routePatterns={
        Array [
          Object {
            "geometry": Object {
              "coordinates": Array [
                Array [
                  -122.0246,
                  36.9707,
                ],
                Array [
                  -122.0279,
                  37.049,
                ],
                Array [
                  -121.9799,
                  37.2299,
                ],
                Array [
                  -121.9445,
                  37.324,
                ],
                Array [
                  -121.936,
                  37.353,
                ],
                Array [
                  -121.924,
                  37.365,
                ],
              ],
              "type": "LineString",
            },
            "name": "Mock Pattern",
            "pattern_id": "mock-pattern-id",
            "stops": Array [
              Object {
                "stop_id": "1",
                "stop_lat": 36.9707,
                "stop_lon": -122.0246,
                "stop_name": "Santa Cruz",
              },
              Object {
                "stop_id": "2",
                "stop_lat": 37.049,
                "stop_lon": -122.0279,
                "stop_name": "Scotts Valley",
              },
            ],
            "trips": Array [
              Object {
                "duration": 1234,
                "end_time": 13579,
                "start_time": 12345,
                "trip_headsign": "To Downtown",
                "trip_id": "abcd",
                "trip_short_name": "The Express",
              },
            ],
          },
        ]
      }
      trips={
        Array [
          "abcd",
        ]
      }
    >
      <Group>
        <div
          className="form-group"
        >
          <label
            htmlFor="Patterns"
          >
            Select patterns
          </label>
          <ForwardRef
            getOptionLabel={[Function]}
            getOptionValue={[Function]}
            inputId="Patterns"
            isMulti={true}
            name="Patterns"
            onChange={[Function]}
            options={
              Array [
                Object {
                  "geometry": Object {
                    "coordinates": Array [
                      Array [
                        -122.0246,
                        36.9707,
                      ],
                      Array [
                        -122.0279,
                        37.049,
                      ],
                      Array [
                        -121.9799,
                        37.2299,
                      ],
                      Array [
                        -121.9445,
                        37.324,
                      ],
                      Array [
                        -121.936,
                        37.353,
                      ],
                      Array [
                        -121.924,
                        37.365,
                      ],
                    ],
                    "type": "LineString",
                  },
                  "name": "Mock Pattern",
                  "pattern_id": "mock-pattern-id",
                  "stops": Array [
                    Object {
                      "stop_id": "1",
                      "stop_lat": 36.9707,
                      "stop_lon": -122.0246,
                      "stop_name": "Santa Cruz",
                    },
                    Object {
                      "stop_id": "2",
                      "stop_lat": 37.049,
                      "stop_lon": -122.0279,
                      "stop_name": "Scotts Valley",
                    },
                  ],
                  "trips": Array [
                    Object {
                      "duration": 1234,
                      "end_time": 13579,
                      "start_time": 12345,
                      "trip_headsign": "To Downtown",
                      "trip_id": "abcd",
                      "trip_short_name": "The Express",
                    },
                  ],
                },
              ]
            }
            placeholder="Select patterns"
            value={
              Array [
                Object {
                  "geometry": Object {
                    "coordinates": Array [
                      Array [
                        -122.0246,
                        36.9707,
                      ],
                      Array [
                        -122.0279,
                        37.049,
                      ],
                      Array [
                        -121.9799,
                        37.2299,
                      ],
                      Array [
                        -121.9445,
                        37.324,
                      ],
                      Array [
                        -121.936,
                        37.353,
                      ],
                      Array [
                        -121.924,
                        37.365,
                      ],
                    ],
                    "type": "LineString",
                  },
                  "name": "Mock Pattern",
                  "pattern_id": "mock-pattern-id",
                  "stops": Array [
                    Object {
                      "stop_id": "1",
                      "stop_lat": 36.9707,
                      "stop_lon": -122.0246,
                      "stop_name": "Santa Cruz",
                    },
                    Object {
                      "stop_id": "2",
                      "stop_lat": 37.049,
                      "stop_lon": -122.0279,
                      "stop_name": "Scotts Valley",
                    },
                  ],
                  "trips": Array [
                    Object {
                      "duration": 1234,
                      "end_time": 13579,
                      "start_time": 12345,
                      "trip_headsign": "To Downtown",
                      "trip_id": "abcd",
                      "trip_short_name": "The Express",
                    },
                  ],
                },
              ]
            }
          >
            <ReactSelect
              getOptionLabel={[Function]}
              getOptionValue={[Function]}
              innerRef={null}
              inputId="Patterns"
              isMulti={true}
              name="Patterns"
              onChange={[Function]}
              options={
                Array [
                  Object {
                    "geometry": Object {
                      "coordinates": Array [
                        Array [
                          -122.0246,
                          36.9707,
                        ],
                        Array [
                          -122.0279,
                          37.049,
                        ],
                        Array [
                          -121.9799,
                          37.2299,
                        ],
                        Array [
                          -121.9445,
                          37.324,
                        ],
                        Array [
                          -121.936,
                          37.353,
                        ],
                        Array [
                          -121.924,
                          37.365,
                        ],
                      ],
                      "type": "LineString",
                    },
                    "name": "Mock Pattern",
                    "pattern_id": "mock-pattern-id",
                    "stops": Array [
                      Object {
                        "stop_id": "1",
                        "stop_lat": 36.9707,
                        "stop_lon": -122.0246,
                        "stop_name": "Santa Cruz",
                      },
                      Object {
                        "stop_id": "2",
                        "stop_lat": 37.049,
                        "stop_lon": -122.0279,
                        "stop_name": "Scotts Valley",
                      },
                    ],
                    "trips": Array [
                      Object {
                        "duration": 1234,
                        "end_time": 13579,
                        "start_time": 12345,
                        "trip_headsign": "To Downtown",
                        "trip_id": "abcd",
                        "trip_short_name": "The Express",
                      },
                    ],
                  },
                ]
              }
              placeholder="Select patterns"
              styles={
                Object {
                  "control": [Function],
                  "option": [Function],
                }
              }
              value={
                Array [
                  Object {
                    "geometry": Object {
                      "coordinates": Array [
                        Array [
                          -122.0246,
                          36.9707,
                        ],
                        Array [
                          -122.0279,
                          37.049,
                        ],
                        Array [
                          -121.9799,
                          37.2299,
                        ],
                        Array [
                          -121.9445,
                          37.324,
                        ],
                        Array [
                          -121.936,
                          37.353,
                        ],
                        Array [
                          -121.924,
                          37.365,
                        ],
                      ],
                      "type": "LineString",
                    },
                    "name": "Mock Pattern",
                    "pattern_id": "mock-pattern-id",
                    "stops": Array [
                      Object {
                        "stop_id": "1",
                        "stop_lat": 36.9707,
                        "stop_lon": -122.0246,
                        "stop_name": "Santa Cruz",
                      },
                      Object {
                        "stop_id": "2",
                        "stop_lat": 37.049,
                        "stop_lon": -122.0279,
                        "stop_name": "Scotts Valley",
                      },
                    ],
                    "trips": Array [
                      Object {
                        "duration": 1234,
                        "end_time": 13579,
                        "start_time": 12345,
                        "trip_headsign": "To Downtown",
                        "trip_id": "abcd",
                        "trip_short_name": "The Express",
                      },
                    ],
                  },
                ]
              }
            >
              <div
                className="ReactSelectMock"
              />
            </ReactSelect>
          </ForwardRef>
        </div>
      </Group>
    </SelectPatterns>
  </SelectFeedRouteAndPatterns>
  <Group>
    <div
      className="form-group"
    >
      <label
        htmlFor="Select from stop"
      >
        Start of reroute/extension (existing stop on pattern)
      </label>
      Santa Cruz
      <Group
        justified={true}
      >
        <div
          className="btn-group btn-group-justified"
        >
          <Button
            block={true}
            onClick={[Function]}
            style="info"
            title="Select from stop"
          >
            <a
              className="btn btn-info btn-block"
              href="#"
              onClick={[Function]}
              tabIndex={0}
              title="Select from stop"
            >
              <Icon
                icon={
                  Object {
                    "icon": Array [],
                    "iconName": "crosshairs",
                    "prefix": "fas",
                  }
                }
              >
                <FontAwesomeIcon
                  border={false}
                  className=""
                  fixedWidth={true}
                  flip={null}
                  icon={
                    Object {
                      "icon": Array [],
                      "iconName": "crosshairs",
                      "prefix": "fas",
                    }
                  }
                  inverse={false}
                  listItem={false}
                  mask={null}
                  pull={null}
                  pulse={false}
                  rotation={null}
                  size={null}
                  spin={false}
                  swapOpacity={false}
                  symbol={false}
                  title=""
                  transform={null}
                >
                  <svg
                    aria-hidden="true"
                    className="svg-inline--fa fa-crosshairs fa-w-NaN fa-fw "
                    data-icon="crosshairs"
                    data-prefix="fas"
                    focusable="false"
                    role="img"
                    style={Object {}}
                    viewBox="0 0 undefined undefined"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      fill="currentColor"
                      style={Object {}}
                    />
                  </svg>
                </FontAwesomeIcon>
              </Icon>
               
              Select
            </a>
          </Button>
          <Button
            block={true}
            disabled={false}
            onClick={[Function]}
            style="danger"
            title="Clear from stop"
          >
            <a
              className="btn btn-danger btn-block"
              disabled={false}
              href="#"
              onClick={[Function]}
              tabIndex={0}
              title="Clear from stop"
            >
              <Icon
                icon={
                  Object {
                    "icon": Array [],
                    "iconName": "times",
                    "prefix": "fas",
                  }
                }
              >
                <FontAwesomeIcon
                  border={false}
                  className=""
                  fixedWidth={true}
                  flip={null}
                  icon={
                    Object {
                      "icon": Array [],
                      "iconName": "times",
                      "prefix": "fas",
                    }
                  }
                  inverse={false}
                  listItem={false}
                  mask={null}
                  pull={null}
                  pulse={false}
                  rotation={null}
                  size={null}
                  spin={false}
                  swapOpacity={false}
                  symbol={false}
                  title=""
                  transform={null}
                >
                  <svg
                    aria-hidden="true"
                    className="svg-inline--fa fa-times fa-w-NaN fa-fw "
                    data-icon="times"
                    data-prefix="fas"
                    focusable="false"
                    role="img"
                    style={Object {}}
                    viewBox="0 0 undefined undefined"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      fill="currentColor"
                      style={Object {}}
                    />
                  </svg>
                </FontAwesomeIcon>
              </Icon>
               
              Clear
            </a>
          </Button>
        </div>
      </Group>
      <br />
      <label
        htmlFor="Select to stop"
      >
        End of reroute/extension (existing stop on pattern)
      </label>
      Scotts Valley
      <Group
        justified={true}
      >
        <div
          className="btn-group btn-group-justified"
        >
          <Button
            block={true}
            onClick={[Function]}
            style="info"
            title="Select to stop"
          >
            <a
              className="btn btn-info btn-block"
              href="#"
              onClick={[Function]}
              tabIndex={0}
              title="Select to stop"
            >
              <Icon
                icon={
                  Object {
                    "icon": Array [],
                    "iconName": "crosshairs",
                    "prefix": "fas",
                  }
                }
              >
                <FontAwesomeIcon
                  border={false}
                  className=""
                  fixedWidth={true}
                  flip={null}
                  icon={
                    Object {
                      "icon": Array [],
                      "iconName": "crosshairs",
                      "prefix": "fas",
                    }
                  }
                  inverse={false}
                  listItem={false}
                  mask={null}
                  pull={null}
                  pulse={false}
                  rotation={null}
                  size={null}
                  spin={false}
                  swapOpacity={false}
                  symbol={false}
                  title=""
                  transform={null}
                >
                  <svg
                    aria-hidden="true"
                    className="svg-inline--fa fa-crosshairs fa-w-NaN fa-fw "
                    data-icon="crosshairs"
                    data-prefix="fas"
                    focusable="false"
                    role="img"
                    style={Object {}}
                    viewBox="0 0 undefined undefined"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      fill="currentColor"
                      style={Object {}}
                    />
                  </svg>
                </FontAwesomeIcon>
              </Icon>
               
              Select
            </a>
          </Button>
          <Button
            block={true}
            disabled={false}
            onClick={[Function]}
            style="danger"
            title="Clear to stop"
          >
            <a
              className="btn btn-danger btn-block"
              disabled={false}
              href="#"
              onClick={[Function]}
              tabIndex={0}
              title="Clear to stop"
            >
              <Icon
                icon={
                  Object {
                    "icon": Array [],
                    "iconName": "times",
                    "prefix": "fas",
                  }
                }
              >
                <FontAwesomeIcon
                  border={false}
                  className=""
                  fixedWidth={true}
                  flip={null}
                  icon={
                    Object {
                      "icon": Array [],
                      "iconName": "times",
                      "prefix": "fas",
                    }
                  }
                  inverse={false}
                  listItem={false}
                  mask={null}
                  pull={null}
                  pulse={false}
                  rotation={null}
                  size={null}
                  spin={false}
                  swapOpacity={false}
                  symbol={false}
                  title=""
                  transform={null}
                >
                  <svg
                    aria-hidden="true"
                    className="svg-inline--fa fa-times fa-w-NaN fa-fw "
                    data-icon="times"
                    data-prefix="fas"
                    focusable="false"
                    role="img"
                    style={Object {}}
                    viewBox="0 0 undefined undefined"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      fill="currentColor"
                      style={Object {}}
                    />
                  </svg>
                </FontAwesomeIcon>
              </Icon>
               
              Clear
            </a>
          </Button>
        </div>
      </Group>
    </div>
  </Group>
  <EditAlignment
    allStops={Array []}
    allowExtend={false}
    disabled={true}
    extendFromEnd={false}
    mapState={
      Object {
        "state": "reroute",
      }
    }
    modification={
      Object {
        "_id": "1234",
        "accessGroup": "accessGroupName",
        "bidirectional": false,
        "createdAt": "2017-11-08T12:30:50.133Z",
        "createdBy": "person@gmail.com",
        "description": "Mock description",
        "dwellTime": 0,
        "entries": Array [],
        "feed": "1",
        "fromStop": "1",
        "name": "Test Modification",
        "nonce": "12345",
        "projectId": "1",
        "routes": Array [
          "route1",
        ],
        "segmentSpeeds": Array [],
        "segments": Array [],
        "timetables": Array [
          Object {
            "_id": "timetable-id",
            "dwellTime": 10,
            "dwellTimes": Array [
              12,
            ],
            "endTime": 57600,
            "exactTimes": false,
            "friday": true,
            "headwaySecs": 900,
            "modificationId": "1234",
            "modificationName": "Test Modification",
            "monday": true,
            "name": "Test timetable",
            "patternTrips": Array [
              "abcd",
            ],
            "phaseAtStop": "",
            "phaseFromStop": "",
            "phaseFromTimetable": "",
            "phaseSeconds": 300,
            "saturday": false,
            "segmentSpeeds": Array [],
            "sourceTrip": "abcd",
            "startTime": 28800,
            "sunday": false,
            "thursday": true,
            "tuesday": true,
            "wednesday": true,
          },
        ],
        "toStop": "2",
        "trips": Array [
          "abcd",
        ],
        "type": "reroute",
        "updatedAt": "2017-11-08T12:31:19.602Z",
        "updatedBy": "person@gmail.com",
        "variants": Array [
          true,
        ],
      }
    }
    setMapState={[MockFunction]}
    update={[MockFunction]}
  >
    <ForwardRef
      allowExtend={false}
      extendFromEnd={false}
      spacing={4}
    >
      <Flex
        allowExtend={false}
        direction="column"
        extendFromEnd={false}
      >
        <Box
          allowExtend={false}
          display="flex"
          extendFromEnd={false}
          flexDirection="column"
        >
          <div
            className="css-j7qwjs"
          >
            <Heading
              key=".0"
              mb={4}
              size="sm"
            >
              <Box
                as="h2"
                fontFamily="heading"
                fontSize="md"
                fontWeight="bold"
                lineHeight="shorter"
                mb={4}
              >
                <h2
                  className="css-35hltn"
                >
                  Route Geometry
                </h2>
              </Box>
            </Heading>
            <Button
              isDisabled={true}
              isFullWidth={true}
              key=".3"
              leftIcon="edit"
              mb={4}
              onClick={[Function]}
              variantColor="yellow"
            >
              <PseudoBox
                _active={
                  Object {
                    "bg": "yellow.700",
                  }
                }
                _disabled={
                  Object {
                    "boxShadow": "none",
                    "cursor": "not-allowed",
                    "opacity": "40%",
                  }
                }
                _focus={
                  Object {
                    "boxShadow": "outline",
                  }
                }
                _hover={
                  Object {
                    "bg": "yellow.600",
                  }
                }
                alignItems="center"
                appearance="none"
                aria-disabled={true}
                as="button"
                bg="yellow.500"
                borderRadius="md"
                color="white"
                disabled={true}
                display="inline-flex"
                fontSize="md"
                fontWeight="semibold"
                height={10}
                justifyContent="center"
                lineHeight="1.2"
                mb={4}
                minWidth={10}
                onClick={[Function]}
                outline="none"
                position="relative"
                px={4}
                transition="all 250ms"
                type="button"
                userSelect="none"
                verticalAlign="middle"
                whiteSpace="nowrap"
                width="full"
              >
                <button
                  aria-disabled={true}
                  className="css-emnr3w"
                  disabled={true}
                  onClick={[Function]}
                  type="button"
                >
                  <ButtonIcon
                    icon="edit"
                    ml={-1}
                    mr={2}
                  >
                    <Icon
                      aria-hidden="true"
                      color="currentColor"
                      focusable="false"
                      ml={-1}
                      mr={2}
                      name="edit"
                    >
                      <Styled(div)
                        aria-hidden="true"
                        as="svg"
                        color="currentColor"
                        display="inline-block"
                        focusable="false"
                        ml={-1}
                        mr={2}
                        role="presentation"
                        size="1em"
                        verticalAlign="middle"
                        viewBox="0 0 24 24"
                      >
                        <svg
                          aria-hidden="true"
                          className="css-yxiis9"
                          focusable="false"
                          role="presentation"
                          viewBox="0 0 24 24"
                        >
                          <g
                            fill="none"
                            stroke="currentColor"
                            strokeLinecap="full"
                            strokeWidth="2"
                          >
                            <path
                              d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"
                            />
                            <path
                              d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"
                            />
                          </g>
                        </svg>
                      </Styled(div)>
                    </Icon>
                  </ButtonIcon>
                  Edit route geometry
                </button>
              </PseudoBox>
            </Button>
            <Alert
              key=".8"
              mb={null}
              status="info"
            >
              <Box
                alignItems="center"
                bg="blue.100"
                display="flex"
                mb={null}
                overflow="hidden"
                pb={3}
                pl={4}
                position="relative"
                pr={4}
                pt={3}
                role="alert"
              >
                <div
                  className="css-127nqbe"
                  role="alert"
                >
                  Modification cannot be bidirectional because timetables in this modification have phasing information.
                </div>
              </Box>
            </Alert>
          </div>
        </Box>
      </Flex>
    </ForwardRef>
  </EditAlignment>
  <SegmentSpeeds
    dwellTime={0}
    dwellTimes={Array []}
    highlightSegment={[Function]}
    highlightStop={[Function]}
    numberOfStops={-2}
    qualifiedStops={Array []}
    segmentDistances={Array []}
    segmentSpeeds={Array []}
    update={[MockFunction]}
  >
    <ForwardRef
      spacing={5}
    >
      <Flex
        direction="column"
      >
        <Box
          display="flex"
          flexDirection="column"
        >
          <div
            className="css-j7qwjs"
          >
            <Heading
              display="flex"
              justifyContent="space-between"
              key=".0"
              mb={5}
              size="sm"
            >
              <Box
                as="h2"
                display="flex"
                fontFamily="heading"
                fontSize="md"
                fontWeight="bold"
                justifyContent="space-between"
                lineHeight="shorter"
                mb={5}
              >
                <h2
                  className="css-9mbd5b"
                >
                  <Text>
                    <Box
                      as="p"
                      fontFamily="body"
                    >
                      <p
                        className="css-fzcsno"
                      >
                        Travel time 
                      </p>
                    </Box>
                  </Text>
                  <Text
                    fontWeight="bolder"
                  >
                    <Box
                      as="p"
                      fontFamily="body"
                      fontWeight="bolder"
                    >
                      <p
                        className="css-nijsew"
                      >
                        00:00:00
                      </p>
                    </Box>
                  </Text>
                </h2>
              </Box>
            </Heading>
            <Text
              key=".1"
              mb={5}
            >
              <Box
                as="p"
                fontFamily="body"
                mb={5}
              >
                <p
                  className="css-11j9y8j"
                >
                  <em>
                    Dwell time at added stops + moving time along added segments
                  </em>
                </p>
              </Box>
            </Text>
            <Memo(MinutesSeconds)
              key=".2"
              label="Default dwell time"
              mb={5}
              onChange={[Function]}
              seconds={0}
            >
              <FormControl
                isDisabled={false}
                isInvalid={false}
                mb={5}
              >
                <Box
                  mb={5}
                  role="group"
                >
                  <div
                    className="css-1sowyjy"
                    role="group"
                  >
                    <FormLabel
                      htmlFor="00000000-0000-0000-0000-000000000000"
                    >
                      <Box
                        as="label"
                        display="inline-block"
                        fontSize="md"
                        fontWeight="medium"
                        htmlFor="00000000-0000-0000-0000-000000000000"
                        opacity="1"
                        pb="4px"
                        pr="12px"
                        textAlign="left"
                        verticalAlign="middle"
                      >
                        <label
                          className="css-176s5fq"
                          htmlFor="00000000-0000-0000-0000-000000000000"
                        >
                          Default dwell time
                        </label>
                      </Box>
                    </FormLabel>
                    <InputGroup>
                      <Box
                        display="flex"
                        position="relative"
                      >
                        <div
                          className="css-kjafn5"
                        >
                          <Input
                            as="input"
                            errorBorderColor="red.500"
                            focusBorderColor="blue.500"
                            id="00000000-0000-0000-0000-000000000000"
                            isFullWidth={true}
                            isInvalid={false}
                            isValid={true}
                            key=".0"
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            pl={null}
                            placeholder=""
                            pr={null}
                            size="md"
                            type="text"
                            value="00:00:00"
                            variant="outline"
                          >
                            <PseudoBox
                              _disabled={
                                Object {
                                  "cursor": "not-allowed",
                                  "opacity": "0.4",
                                }
                              }
                              _focus={
                                Object {
                                  "borderColor": "#3182ce",
                                  "boxShadow": "0 0 0 1px #3182ce",
                                  "zIndex": 1,
                                }
                              }
                              _hover={
                                Object {
                                  "borderColor": "gray.300",
                                }
                              }
                              _invalid={
                                Object {
                                  "borderColor": "#e53e3e",
                                  "boxShadow": "0 0 0 1px #e53e3e",
                                }
                              }
                              _readOnly={
                                Object {
                                  "bg": "transparent",
                                  "boxShadow": "none !important",
                                  "userSelect": "all",
                                }
                              }
                              alignItems="center"
                              appearance="none"
                              aria-disabled={false}
                              aria-invalid={false}
                              as="input"
                              bg="white"
                              border="1px"
                              borderColor="inherit"
                              disabled={false}
                              display="flex"
                              fontSize="md"
                              height={10}
                              id="00000000-0000-0000-0000-000000000000"
                              isValid={true}
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              outline="none"
                              pl={null}
                              placeholder=""
                              position="relative"
                              pr={null}
                              px={4}
                              rounded="md"
                              transition="all 0.2s"
                              type="text"
                              value="00:00:00"
                              width="100%"
                            >
                              <input
                                aria-disabled={false}
                                aria-invalid={false}
                                className="css-1ga4kqw"
                                disabled={false}
                                id="00000000-0000-0000-0000-000000000000"
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                placeholder=""
                                type="text"
                                value="00:00:00"
                              />
                            </PseudoBox>
                          </Input>
                          <InputRightElement
                            color="gray.400"
                            key=".1"
                            mr={4}
                            size="md"
                            userSelect="none"
                            width="unset"
                          >
                            <InputElement
                              color="gray.400"
                              mr={4}
                              placement="right"
                              size="md"
                              userSelect="none"
                              width="unset"
                            >
                              <Box
                                alignItems="center"
                                color="gray.400"
                                display="flex"
                                fontSize="md"
                                height={10}
                                justifyContent="center"
                                mr={4}
                                position="absolute"
                                right="0"
                                top="0"
                                userSelect="none"
                                width="unset"
                                zIndex={2}
                              >
                                <div
                                  className="css-1he2y93"
                                >
                                  HH:mm:ss
                                </div>
                              </Box>
                            </InputElement>
                          </InputRightElement>
                        </div>
                      </Box>
                    </InputGroup>
                  </div>
                </Box>
              </FormControl>
            </Memo(MinutesSeconds)>
            <Text
              key=".3"
              mb={5}
            >
              <Box
                as="p"
                fontFamily="body"
                mb={5}
              >
                <p
                  className="css-11j9y8j"
                >
                  The default time table dwell time will be used for each stop that does not have a custom one set.
                </p>
              </Box>
            </Text>
            <Collapsible
              key=".4"
              mb={5}
              title="Set individual stop dwell times"
            >
              <Box
                mb={5}
              >
                <div
                  className="css-1sowyjy"
                >
                  <Button
                    isFullWidth={true}
                    leftIcon="chevron-right"
                    onClick={[Function]}
                  >
                    <PseudoBox
                      _active={
                        Object {
                          "bg": "gray.300",
                        }
                      }
                      _disabled={
                        Object {
                          "boxShadow": "none",
                          "cursor": "not-allowed",
                          "opacity": "40%",
                        }
                      }
                      _focus={
                        Object {
                          "boxShadow": "outline",
                        }
                      }
                      _hover={
                        Object {
                          "bg": "gray.200",
                        }
                      }
                      alignItems="center"
                      appearance="none"
                      as="button"
                      bg="gray.100"
                      borderRadius="md"
                      display="inline-flex"
                      fontSize="md"
                      fontWeight="semibold"
                      height={10}
                      justifyContent="center"
                      lineHeight="1.2"
                      minWidth={10}
                      onClick={[Function]}
                      outline="none"
                      position="relative"
                      px={4}
                      transition="all 250ms"
                      type="button"
                      userSelect="none"
                      verticalAlign="middle"
                      whiteSpace="nowrap"
                      width="full"
                    >
                      <button
                        className="css-z70eed"
                        onClick={[Function]}
                        type="button"
                      >
                        <ButtonIcon
                          icon="chevron-right"
                          ml={-1}
                          mr={2}
                        >
                          <Icon
                            aria-hidden="true"
                            color="currentColor"
                            focusable="false"
                            ml={-1}
                            mr={2}
                            name="chevron-right"
                          >
                            <Styled(div)
                              aria-hidden="true"
                              as="svg"
                              color="currentColor"
                              display="inline-block"
                              focusable="false"
                              ml={-1}
                              mr={2}
                              role="presentation"
                              size="1em"
                              verticalAlign="middle"
                              viewBox="0 0 24 24"
                            >
                              <svg
                                aria-hidden="true"
                                className="css-yxiis9"
                                focusable="false"
                                role="presentation"
                                viewBox="0 0 24 24"
                              >
                                <path
                                  d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                                  fill="currentColor"
                                />
                              </svg>
                            </Styled(div)>
                          </Icon>
                        </ButtonIcon>
                        Set individual stop dwell times
                      </button>
                    </PseudoBox>
                  </Button>
                  <Collapse
                    isOpen={false}
                    pt={4}
                  >
                    <EmotionCssPropInternal
                      __EMOTION_TYPE_PLEASE_DO_NOT_USE__={[Function]}
                      animateOpacity={true}
                      applyInlineTransitions={false}
                      css={
                        Object {
                          "&.rah-animating--to-height-zero": Object {
                            "opacity": 0,
                            "transform": "translateY(-0.625rem)",
                          },
                          "transition": "height .2s ease,opacity .2s ease-in-out,transform .2s ease-in-out",
                        }
                      }
                      easing="ease"
                      height={0}
                    >
                      <AnimateHeight
                        animateOpacity={true}
                        animationStateClasses={
                          Object {
                            "animating": "rah-animating",
                            "animatingDown": "rah-animating--down",
                            "animatingToHeightAuto": "rah-animating--to-height-auto",
                            "animatingToHeightSpecific": "rah-animating--to-height-specific",
                            "animatingToHeightZero": "rah-animating--to-height-zero",
                            "animatingUp": "rah-animating--up",
                            "static": "rah-static",
                            "staticHeightAuto": "rah-static--height-auto",
                            "staticHeightSpecific": "rah-static--height-specific",
                            "staticHeightZero": "rah-static--height-zero",
                          }
                        }
                        applyInlineTransitions={false}
                        className="css-vppuuz"
                        delay={0}
                        duration={250}
                        easing="ease"
                        height={0}
                        style={Object {}}
                      >
                        <div
                          aria-hidden={true}
                          className="rah-static rah-static--height-zero css-vppuuz"
                          style={
                            Object {
                              "height": 0,
                              "overflow": "hidden",
                            }
                          }
                        >
                          <div
                            style={
                              Object {
                                "WebkitTransition": "opacity 250ms ease 0ms",
                                "opacity": 0,
                                "transition": "opacity 250ms ease 0ms",
                              }
                            }
                          >
                            <Box
                              pt={4}
                            >
                              <div
                                className="css-17bmav7"
                              >
                                <ForwardRef
                                  spacing={3}
                                >
                                  <Flex
                                    direction="column"
                                  >
                                    <Box
                                      display="flex"
                                      flexDirection="column"
                                    >
                                      <div
                                        className="css-j7qwjs"
                                      />
                                    </Box>
                                  </Flex>
                                </ForwardRef>
                              </div>
                            </Box>
                          </div>
                        </div>
                      </AnimateHeight>
                    </EmotionCssPropInternal>
                  </Collapse>
                </div>
              </Box>
            </Collapsible>
            <AverageSpeed
              key=".5"
              mb={5}
              segmentDistances={Array []}
              segmentSpeeds={Array []}
              segmentSpeedsAreEqual={true}
              setSegmentSpeeds={[Function]}
            >
              <Speed
                label="Average speed (along added segments)"
                mb={5}
                onChange={[Function]}
                speed={NaN}
              >
                <FormControl
                  isDisabled={false}
                  isInvalid={false}
                  mb={5}
                >
                  <Box
                    mb={5}
                    role="group"
                  >
                    <div
                      className="css-1sowyjy"
                      role="group"
                    >
                      <FormLabel
                        htmlFor="00000000-0000-0000-0000-000000000000"
                      >
                        <Box
                          as="label"
                          display="inline-block"
                          fontSize="md"
                          fontWeight="medium"
                          htmlFor="00000000-0000-0000-0000-000000000000"
                          opacity="1"
                          pb="4px"
                          pr="12px"
                          textAlign="left"
                          verticalAlign="middle"
                        >
                          <label
                            className="css-176s5fq"
                            htmlFor="00000000-0000-0000-0000-000000000000"
                          >
                            Average speed (along added segments)
                          </label>
                        </Box>
                      </FormLabel>
                      <InputGroup>
                        <Box
                          display="flex"
                          position="relative"
                        >
                          <div
                            className="css-kjafn5"
                          >
                            <Input
                              as="input"
                              errorBorderColor="red.500"
                              focusBorderColor="blue.500"
                              id="00000000-0000-0000-0000-000000000000"
                              isFullWidth={true}
                              isInvalid={false}
                              isValid={true}
                              key=".0"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              pl={null}
                              placeholder=""
                              pr={null}
                              size="md"
                              type="text"
                              value={NaN}
                              variant="outline"
                            >
                              <PseudoBox
                                _disabled={
                                  Object {
                                    "cursor": "not-allowed",
                                    "opacity": "0.4",
                                  }
                                }
                                _focus={
                                  Object {
                                    "borderColor": "#3182ce",
                                    "boxShadow": "0 0 0 1px #3182ce",
                                    "zIndex": 1,
                                  }
                                }
                                _hover={
                                  Object {
                                    "borderColor": "gray.300",
                                  }
                                }
                                _invalid={
                                  Object {
                                    "borderColor": "#e53e3e",
                                    "boxShadow": "0 0 0 1px #e53e3e",
                                  }
                                }
                                _readOnly={
                                  Object {
                                    "bg": "transparent",
                                    "boxShadow": "none !important",
                                    "userSelect": "all",
                                  }
                                }
                                alignItems="center"
                                appearance="none"
                                aria-disabled={false}
                                aria-invalid={false}
                                as="input"
                                bg="white"
                                border="1px"
                                borderColor="inherit"
                                disabled={false}
                                display="flex"
                                fontSize="md"
                                height={10}
                                id="00000000-0000-0000-0000-000000000000"
                                isValid={true}
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                outline="none"
                                pl={null}
                                placeholder=""
                                position="relative"
                                pr={null}
                                px={4}
                                rounded="md"
                                transition="all 0.2s"
                                type="text"
                                value={NaN}
                                width="100%"
                              >
                                <input
                                  aria-disabled={false}
                                  aria-invalid={false}
                                  className="css-1ga4kqw"
                                  disabled={false}
                                  id="00000000-0000-0000-0000-000000000000"
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  onFocus={[Function]}
                                  placeholder=""
                                  type="text"
                                  value={NaN}
                                />
                              </PseudoBox>
                            </Input>
                            <InputRightElement
                              color="gray.400"
                              key=".1"
                              mr={4}
                              size="md"
                              userSelect="none"
                              width="unset"
                            >
                              <InputElement
                                color="gray.400"
                                mr={4}
                                placement="right"
                                size="md"
                                userSelect="none"
                                width="unset"
                              >
                                <Box
                                  alignItems="center"
                                  color="gray.400"
                                  display="flex"
                                  fontSize="md"
                                  height={10}
                                  justifyContent="center"
                                  mr={4}
                                  position="absolute"
                                  right="0"
                                  top="0"
                                  userSelect="none"
                                  width="unset"
                                  zIndex={2}
                                >
                                  <div
                                    className="css-1he2y93"
                                  >
                                    km/h
                                  </div>
                                </Box>
                              </InputElement>
                            </InputRightElement>
                          </div>
                        </Box>
                      </InputGroup>
                    </div>
                  </Box>
                </FormControl>
              </Speed>
            </AverageSpeed>
            <TravelTime
              key=".6"
              mb={5}
              movingSeconds={0}
              numberOfStops={-2}
              segmentDistances={Array []}
              segmentSpeedsAreEqual={true}
              setSegmentSpeeds={[Function]}
            >
              <Memo(MinutesSeconds)
                label="Total moving time (along added segments)"
                mb={5}
                onChange={[Function]}
                seconds={0}
              >
                <FormControl
                  isDisabled={false}
                  isInvalid={false}
                  mb={5}
                >
                  <Box
                    mb={5}
                    role="group"
                  >
                    <div
                      className="css-1sowyjy"
                      role="group"
                    >
                      <FormLabel
                        htmlFor="00000000-0000-0000-0000-000000000000"
                      >
                        <Box
                          as="label"
                          display="inline-block"
                          fontSize="md"
                          fontWeight="medium"
                          htmlFor="00000000-0000-0000-0000-000000000000"
                          opacity="1"
                          pb="4px"
                          pr="12px"
                          textAlign="left"
                          verticalAlign="middle"
                        >
                          <label
                            className="css-176s5fq"
                            htmlFor="00000000-0000-0000-0000-000000000000"
                          >
                            Total moving time (along added segments)
                          </label>
                        </Box>
                      </FormLabel>
                      <InputGroup>
                        <Box
                          display="flex"
                          position="relative"
                        >
                          <div
                            className="css-kjafn5"
                          >
                            <Input
                              as="input"
                              errorBorderColor="red.500"
                              focusBorderColor="blue.500"
                              id="00000000-0000-0000-0000-000000000000"
                              isFullWidth={true}
                              isInvalid={false}
                              isValid={true}
                              key=".0"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              pl={null}
                              placeholder=""
                              pr={null}
                              size="md"
                              type="text"
                              value="00:00:00"
                              variant="outline"
                            >
                              <PseudoBox
                                _disabled={
                                  Object {
                                    "cursor": "not-allowed",
                                    "opacity": "0.4",
                                  }
                                }
                                _focus={
                                  Object {
                                    "borderColor": "#3182ce",
                                    "boxShadow": "0 0 0 1px #3182ce",
                                    "zIndex": 1,
                                  }
                                }
                                _hover={
                                  Object {
                                    "borderColor": "gray.300",
                                  }
                                }
                                _invalid={
                                  Object {
                                    "borderColor": "#e53e3e",
                                    "boxShadow": "0 0 0 1px #e53e3e",
                                  }
                                }
                                _readOnly={
                                  Object {
                                    "bg": "transparent",
                                    "boxShadow": "none !important",
                                    "userSelect": "all",
                                  }
                                }
                                alignItems="center"
                                appearance="none"
                                aria-disabled={false}
                                aria-invalid={false}
                                as="input"
                                bg="white"
                                border="1px"
                                borderColor="inherit"
                                disabled={false}
                                display="flex"
                                fontSize="md"
                                height={10}
                                id="00000000-0000-0000-0000-000000000000"
                                isValid={true}
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                outline="none"
                                pl={null}
                                placeholder=""
                                position="relative"
                                pr={null}
                                px={4}
                                rounded="md"
                                transition="all 0.2s"
                                type="text"
                                value="00:00:00"
                                width="100%"
                              >
                                <input
                                  aria-disabled={false}
                                  aria-invalid={false}
                                  className="css-1ga4kqw"
                                  disabled={false}
                                  id="00000000-0000-0000-0000-000000000000"
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  onFocus={[Function]}
                                  placeholder=""
                                  type="text"
                                  value="00:00:00"
                                />
                              </PseudoBox>
                            </Input>
                            <InputRightElement
                              color="gray.400"
                              key=".1"
                              mr={4}
                              size="md"
                              userSelect="none"
                              width="unset"
                            >
                              <InputElement
                                color="gray.400"
                                mr={4}
                                placement="right"
                                size="md"
                                userSelect="none"
                                width="unset"
                              >
                                <Box
                                  alignItems="center"
                                  color="gray.400"
                                  display="flex"
                                  fontSize="md"
                                  height={10}
                                  justifyContent="center"
                                  mr={4}
                                  position="absolute"
                                  right="0"
                                  top="0"
                                  userSelect="none"
                                  width="unset"
                                  zIndex={2}
                                >
                                  <div
                                    className="css-1he2y93"
                                  >
                                    HH:mm:ss
                                  </div>
                                </Box>
                              </InputElement>
                            </InputRightElement>
                          </div>
                        </Box>
                      </InputGroup>
                    </div>
                  </Box>
                </FormControl>
              </Memo(MinutesSeconds)>
            </TravelTime>
            <Collapsible
              key=".7"
              mb={null}
              title="Set individual segment speeds"
            >
              <Box
                mb={null}
              >
                <div
                  className="css-0"
                >
                  <Button
                    isFullWidth={true}
                    leftIcon="chevron-right"
                    onClick={[Function]}
                  >
                    <PseudoBox
                      _active={
                        Object {
                          "bg": "gray.300",
                        }
                      }
                      _disabled={
                        Object {
                          "boxShadow": "none",
                          "cursor": "not-allowed",
                          "opacity": "40%",
                        }
                      }
                      _focus={
                        Object {
                          "boxShadow": "outline",
                        }
                      }
                      _hover={
                        Object {
                          "bg": "gray.200",
                        }
                      }
                      alignItems="center"
                      appearance="none"
                      as="button"
                      bg="gray.100"
                      borderRadius="md"
                      display="inline-flex"
                      fontSize="md"
                      fontWeight="semibold"
                      height={10}
                      justifyContent="center"
                      lineHeight="1.2"
                      minWidth={10}
                      onClick={[Function]}
                      outline="none"
                      position="relative"
                      px={4}
                      transition="all 250ms"
                      type="button"
                      userSelect="none"
                      verticalAlign="middle"
                      whiteSpace="nowrap"
                      width="full"
                    >
                      <button
                        className="css-z70eed"
                        onClick={[Function]}
                        type="button"
                      >
                        <ButtonIcon
                          icon="chevron-right"
                          ml={-1}
                          mr={2}
                        >
                          <Icon
                            aria-hidden="true"
                            color="currentColor"
                            focusable="false"
                            ml={-1}
                            mr={2}
                            name="chevron-right"
                          >
                            <Styled(div)
                              aria-hidden="true"
                              as="svg"
                              color="currentColor"
                              display="inline-block"
                              focusable="false"
                              ml={-1}
                              mr={2}
                              role="presentation"
                              size="1em"
                              verticalAlign="middle"
                              viewBox="0 0 24 24"
                            >
                              <svg
                                aria-hidden="true"
                                className="css-yxiis9"
                                focusable="false"
                                role="presentation"
                                viewBox="0 0 24 24"
                              >
                                <path
                                  d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                                  fill="currentColor"
                                />
                              </svg>
                            </Styled(div)>
                          </Icon>
                        </ButtonIcon>
                        Set individual segment speeds
                      </button>
                    </PseudoBox>
                  </Button>
                  <Collapse
                    isOpen={false}
                    pt={4}
                  >
                    <EmotionCssPropInternal
                      __EMOTION_TYPE_PLEASE_DO_NOT_USE__={[Function]}
                      animateOpacity={true}
                      applyInlineTransitions={false}
                      css={
                        Object {
                          "&.rah-animating--to-height-zero": Object {
                            "opacity": 0,
                            "transform": "translateY(-0.625rem)",
                          },
                          "transition": "height .2s ease,opacity .2s ease-in-out,transform .2s ease-in-out",
                        }
                      }
                      easing="ease"
                      height={0}
                    >
                      <AnimateHeight
                        animateOpacity={true}
                        animationStateClasses={
                          Object {
                            "animating": "rah-animating",
                            "animatingDown": "rah-animating--down",
                            "animatingToHeightAuto": "rah-animating--to-height-auto",
                            "animatingToHeightSpecific": "rah-animating--to-height-specific",
                            "animatingToHeightZero": "rah-animating--to-height-zero",
                            "animatingUp": "rah-animating--up",
                            "static": "rah-static",
                            "staticHeightAuto": "rah-static--height-auto",
                            "staticHeightSpecific": "rah-static--height-specific",
                            "staticHeightZero": "rah-static--height-zero",
                          }
                        }
                        applyInlineTransitions={false}
                        className="css-vppuuz"
                        delay={0}
                        duration={250}
                        easing="ease"
                        height={0}
                        style={Object {}}
                      >
                        <div
                          aria-hidden={true}
                          className="rah-static rah-static--height-zero css-vppuuz"
                          style={
                            Object {
                              "height": 0,
                              "overflow": "hidden",
                            }
                          }
                        >
                          <div
                            style={
                              Object {
                                "WebkitTransition": "opacity 250ms ease 0ms",
                                "opacity": 0,
                                "transition": "opacity 250ms ease 0ms",
                              }
                            }
                          >
                            <Box
                              pt={4}
                            >
                              <div
                                className="css-17bmav7"
                              >
                                <ForwardRef
                                  spacing={4}
                                >
                                  <Flex
                                    direction="column"
                                  >
                                    <Box
                                      display="flex"
                                      flexDirection="column"
                                    >
                                      <div
                                        className="css-j7qwjs"
                                      />
                                    </Box>
                                  </Flex>
                                </ForwardRef>
                              </div>
                            </Box>
                          </div>
                        </div>
                      </AnimateHeight>
                    </EmotionCssPropInternal>
                  </Collapse>
                </div>
              </Box>
            </Collapsible>
          </div>
        </Box>
      </Flex>
    </ForwardRef>
  </SegmentSpeeds>
</RerouteComponent>
`;
