// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Component EditBundle snapshot(mount) 1`] = `
<EditBundle
  bundleProjects={Array []}
>
  <Stack
    spacing={4}
  >
    <Flex
      direction="column"
    >
      <Box
        display="flex"
        flexDirection="column"
      >
        <div
          className="css-j7qwjs"
        >
          <Text
            key=".0"
            mb={4}
          >
            <Box
              as="p"
              fontFamily="body"
              mb={4}
            >
              <p
                className="css-zwncle"
              >
                Bundles are a collection of OpenStreetMap data and one or more GTFS feeds that make up the transit layer of a baseline network.
              </p>
            </Box>
          </Text>
          <ButtonLink
            block={true}
            key=".1"
            mb={4}
            queryProps={
              Object {
                "regionId": undefined,
              }
            }
            size="lg"
            to="bundleCreate"
          >
            <Button
              block={true}
              mb={4}
              onClick={[Function]}
              size="lg"
              variantColor="blue"
            >
              <PseudoBox
                _active={
                  Object {
                    "bg": "blue.700",
                  }
                }
                _disabled={
                  Object {
                    "boxShadow": "none",
                    "cursor": "not-allowed",
                    "opacity": "40%",
                  }
                }
                _focus={
                  Object {
                    "boxShadow": "outline",
                  }
                }
                _hover={
                  Object {
                    "bg": "blue.600",
                  }
                }
                alignItems="center"
                appearance="none"
                as="button"
                bg="blue.500"
                block={true}
                borderRadius="md"
                color="white"
                display="inline-flex"
                fontSize="lg"
                fontWeight="semibold"
                height={12}
                justifyContent="center"
                lineHeight="1.2"
                mb={4}
                minWidth={12}
                onClick={[Function]}
                outline="none"
                position="relative"
                px={6}
                transition="all 250ms"
                type="button"
                userSelect="none"
                verticalAlign="middle"
                whiteSpace="nowrap"
              >
                <button
                  className="css-fy00ns"
                  onClick={[Function]}
                  type="button"
                >
                  Create a new bundle
                </button>
              </PseudoBox>
            </Button>
          </ButtonLink>
          <Text
            key=".2"
            mb={4}
            textAlign="center"
          >
            <Box
              as="p"
              fontFamily="body"
              mb={4}
              textAlign="center"
            >
              <p
                className="css-fqvfiw"
              >
                or select an existing one
              </p>
            </Box>
          </Text>
          <Box
            key=".3"
            mb={null}
          >
            <div
              className="css-0"
            >
              <S
                getOptionLabel={[Function]}
                getOptionValue={[Function]}
                onChange={[Function]}
                options={
                  Array [
                    Object {
                      "_id": "1",
                      "accessGroup": "accessGroupName",
                      "centerLat": 38.90124,
                      "centerLon": -77.015615,
                      "createdAt": "2017-11-08T12:30:50.133Z",
                      "createdBy": "person@gmail.com",
                      "errorCode": "",
                      "feeds": Array [],
                      "name": "Mock Bundle",
                      "nonce": "12345",
                      "regionId": "1",
                      "serviceEnd": "2018-09-28",
                      "serviceStart": "2018-09-27",
                      "status": "DONE",
                      "totalFeeds": 0,
                      "updatedAt": "2017-11-08T12:31:19.602Z",
                      "updatedBy": "person@gmail.com",
                    },
                  ]
                }
              >
                <ForwardRef(LoadableComponent)
                  getOptionLabel={[Function]}
                  getOptionValue={[Function]}
                  onChange={[Function]}
                  options={
                    Array [
                      Object {
                        "_id": "1",
                        "accessGroup": "accessGroupName",
                        "centerLat": 38.90124,
                        "centerLon": -77.015615,
                        "createdAt": "2017-11-08T12:30:50.133Z",
                        "createdBy": "person@gmail.com",
                        "errorCode": "",
                        "feeds": Array [],
                        "name": "Mock Bundle",
                        "nonce": "12345",
                        "regionId": "1",
                        "serviceEnd": "2018-09-28",
                        "serviceStart": "2018-09-27",
                        "status": "DONE",
                        "totalFeeds": 0,
                        "updatedAt": "2017-11-08T12:31:19.602Z",
                        "updatedBy": "person@gmail.com",
                      },
                    ]
                  }
                  styles={
                    Object {
                      "control": [Function],
                      "option": [Function],
                    }
                  }
                >
                  <loading
                    error={null}
                    isLoading={true}
                    pastDelay={false}
                    retry={[Function]}
                    timedOut={false}
                  />
                </ForwardRef(LoadableComponent)>
              </S>
            </div>
          </Box>
        </div>
      </Box>
    </Flex>
  </Stack>
</EditBundle>
`;
